on:
  workflow_call:
    inputs:
      CONTROLLER-REPO: 
        required: false
        type: string
        default: partior-libs/controller-3p-pipelines
      CONTROLLER-REF:
        required: false
        type: string
        default: main
    outputs:
      ARTIFACT-VERSION:
        description: "Version tagged"
        value: ${{ jobs.read-config.outputs.ARTIFACT-CONTEXT-NAME }}-${{ jobs.package-helmfile.outputs.ARTIFACT-VERSION }}.tgz

env:
  YAML_CONFIG_IMPORTER: yaml_importer_${{ github.run_id }}_${{ github.run_number }}
  YAML_BRANCH_CONFIG_IMPORTER: yaml_branch_importer_${{ github.run_id }}_${{ github.run_number }}

  
jobs:        
  read-repo:
    runs-on: ubuntu-latest
    outputs:
      BRANCH-NAME: ${{ steps.get-repo.outputs.branch-name }}
      REPO-NAME: ${{ steps.get-repo.outputs.name }}
      DELTA-COMMIT-MSG: ${{ steps.get-repo.outputs.delta-commit-msg }}
      COMMIT-HASH: ${{ steps.get-repo.outputs.commit-hash }}
      PR-NUM: ${{ steps.get-repo.outputs.pr-num }}
      PR-TARGET-BRANCH: ${{ steps.get-repo.outputs.pr-target-branch }}
      SOURCE-BRANCH: ${{ steps.get-repo.outputs.source-branch }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get repo details
        id: get-repo
        run: |
          docker --version
          branchName="$(echo ${GITHUB_REF_NAME} | cut -d"/" -f1)"
          sourceBranch=${GITHUB_REF_NAME}
          prTargetBranch='NIL'
          isPR=false
          commitMessages='NIL'
          commitHash=${GITHUB_SHA}
          prNum='NIL'
          if [[ ! -z "$GITHUB_HEAD_REF" ]]; then
            branchName=$(echo $GITHUB_HEAD_REF | cut -d"/" -f1)
            sourceBranch=${GITHUB_HEAD_REF}
            isPR=true
            prTargetBranch=remotes/origin/${GITHUB_BASE_REF}
            git fetch --all
            echo git log $prTargetBranch..HEAD
            commitMessages=$(git log $prTargetBranch..HEAD --pretty=format:"%s" | sed s/[\`\']//g | tr '\n' ' ' | xargs)
            commitHash=$(git log | grep "Merge.*into" | head -1 | xargs | cut -d" " -f2)
            prNum=$(echo $GITHUB_REF_NAME | cut -d"/" -f1)
          fi
          flattenBranch=${sourceBranch/\//_}
          echo [DEBUG] commitHash=${commitHash}
          echo "source-branch=${sourceBranch}" >> $GITHUB_OUTPUT
          echo "pr-num=${prNum}" >> $GITHUB_OUTPUT
          echo "pr-target-branch=${prTargetBranch}" >> $GITHUB_OUTPUT
          echo "commit-hash=${commitHash}" >> $GITHUB_OUTPUT
          echo "commit-sha=$(echo ${commitHash} | cut -c1-8 )" >> $GITHUB_OUTPUT
          echo "branch-name=${branchName}" >> $GITHUB_OUTPUT
          echo "name=$(echo ${GITHUB_REPOSITORY}  | cut -d"/" -f2)" >> $GITHUB_OUTPUT
          echo "delta-commit-msg=${commitMessages}" >> $GITHUB_OUTPUT
          echo "flatten-branch=${flattenBranch}" >> $GITHUB_OUTPUT

  read-config:
    runs-on: ubuntu-latest
    outputs:
      ARTIFACT-BASE-NAME: ${{ steps.pipeline-config.outputs.artifact-base-name }}
      PREPARE-RELEASE: ${{ steps.pipeline-branch-config.outputs.prepare-release_enabled }}
      TAG-PARTIOR-STABLE: ${{ steps.pipeline-branch-config.outputs.tag-partior-stable_enabled }}
      TAG-VERSION: ${{ steps.pipeline-branch-config.outputs.tag-version_git_enabled }}
    steps:        
      - name: Get owner name
        id: repo-owner
        run: |
          repoOwner=$(echo ${{ inputs.CONTROLLER-REPO }} | cut -d"/" -f1)
          echo "name=$repoOwner" | tee -a $GITHUB_OUTPUT

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_APP_KEY }}
          owner: ${{ steps.repo-owner.outputs.name }}

      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.CONTROLLER-REPO }}
          ref: ${{ inputs.CONTROLLER-REF }}
          token: ${{ steps.app-token.outputs.token }}

      - name: Get repo details
        id: get-repo
        run: |
          branchName="$(echo ${GITHUB_REF_NAME} | cut -d"/" -f1)"
          if [[ ! -z "$GITHUB_HEAD_REF" ]]; then
            branchName=$(echo $GITHUB_HEAD_REF | cut -d"/" -f1)
          fi 
          echo "branch-name=${branchName}" >> $GITHUB_OUTPUT
          echo "name=$(echo ${GITHUB_REPOSITORY}  | cut -d'/' -f2)" >> $GITHUB_OUTPUT

      - name: Generate CI config importer
        uses: partior-libs/gcs-yaml-importer@main
        with:
          yaml-file: projects/${{ steps.get-repo.outputs.name }}.yaml
          query-path: .controller.ci
          set-sub-default-keys: .controller.ci-default
          output-file: ${{ env.YAML_CONFIG_IMPORTER }}
          yaml-file-for-default: projects/controller-default.yaml
          query-path-for-default: .controller.ci
          upload: true

      - name: Start import pipeline config
        id: pipeline-config
        run: |
          echo Importing ...${{ env.YAML_CONFIG_IMPORTER }}
          source ./${{ env.YAML_CONFIG_IMPORTER }}

      - name: Generate CI branch config importer
        uses: partior-libs/gcs-yaml-importer@main
        with:
          yaml-file: projects/${{ steps.get-repo.outputs.name }}.yaml
          query-path: .controller.ci.branches.${{ steps.get-repo.outputs.branch-name }}
          set-sub-default-keys: .controller.ci.branches.default
          output-file: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          yaml-file-for-default: projects/controller-default.yaml
          query-path-for-default: .controller.ci.branches.default
          upload: true

      - name: Start import pipeline branch config
        id: pipeline-branch-config
        run: |
          echo Importing ...${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          source ./${{ env.YAML_BRANCH_CONFIG_IMPORTER }}


  ci-build:
    name: Perform Sanity on Controller
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ needs.read-repo.outputs.BRANCH-NAME }}
    needs: [ read-repo, read-config ] 
    env:
      BRANCH_NAME: ${{ needs.read-repo.outputs.BRANCH-NAME }}
      ALL_DELTA_COMMIT_MSG: ${{ needs.read-repo.outputs.DELTA-COMMIT-MSG }}
      ARTIFACT_BASE_NAME: ${{ needs.read-config.outputs.ARTIFACT-BASE-NAME }}
      COMMIT_HASH: ${{ needs.read-repo.outputs.COMMIT-HASH }}
      PR_NUMBER: ${{ needs.read-repo.outputs.PR-NUM }}
      PR_TARGET_BRANCH: ${{ needs.read-repo.outputs.PR-TARGET-BRANCH }}
      SOURCE_BRANCH: ${{ needs.read-repo.outputs.SOURCE-BRANCH }}
    outputs:
      ARTIFACT-VERSION: ${{ steps.version-bot.outputs.artifact-version-name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_REPO_READER_TOKEN }}

      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - name: Start import pipeline branch config
        id: pipeline-branch-config
        run: |
          echo Importing ...${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          source ./${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.YAML_CONFIG_IMPORTER }}

      - name: Start versioning bot
        id: version-bot
        uses: partior-libs/gcs-versioning-bot@main
        with:
          jfrog-token: ${{ secrets.JFROG_ARTIFACTORY_CONFIG }}
          versioning-rules-importer-file: ${{ env.YAML_CONFIG_IMPORTER }}
          branch-packager-rules-importer-file: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          consolidated-commit-msg: ${{ env.ALL_DELTA_COMMIT_MSG }}
          jira-username: ${{ secrets.JIRA_USERNAME }}
          jira-password: ${{ secrets.JIRA_PASSWORD }}
          debug: true


      - name: Git config
        if: steps.pipeline-branch-config.outputs.tag-version_git_enabled == 'true' || needs.read-config.outputs.PREPARE-RELEASE == 'true'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Create new tag
        if: steps.pipeline-branch-config.outputs.tag-version_git_enabled == 'true' || needs.read-config.outputs.PREPARE-RELEASE == 'true'
        run: git tag -f v${{ steps.version-bot.outputs.artifact-version-name }}

      - name: Push new tag
        if: steps.pipeline-branch-config.outputs.tag-version_git_enabled == 'true' || needs.read-config.outputs.PREPARE-RELEASE == 'true'
        run: git push origin v${{ steps.version-bot.outputs.artifact-version-name }} --force

  prepare-release:
      runs-on: ubuntu-latest
      needs: [ read-repo, read-config, ci-build ]
      if: needs.read-config.outputs.PREPARE-RELEASE == 'true'
      env:
        ARTIFACT_BASE_NAME: ${{ needs.read-config.outputs.ARTIFACT-BASE-NAME }}
        ARTIFACT_VERSION: ${{ needs.ci-build.outputs.ARTIFACT-VERSION }}
        BRANCH_NAME: ${{ needs.read-repo.outputs.BRANCH-NAME }}
        COMMIT_HASH: ${{ needs.read-repo.outputs.COMMIT-HASH }}
        REPO_NAME: ${{ needs.read-repo.outputs.REPO-NAME }}
        
      steps:
      - name: Tag release version on code baseline
        uses: partior-libs/gcs-pipe-utils/actions/generic-git-tag@partior-stable
        with: 
          target-repo: "${{ github.repository }}"
          artifact-version: "${{ env.ARTIFACT_VERSION }}"
          target-repo-ref: "${{ env.COMMIT_HASH }}"
          pat-token: ${{ secrets.GH_REPO_READER_TOKEN }}

      - name: Create release
        uses: partior-libs/gjs-create-release@partior-stable
        with:
          name: "v${{ env.ARTIFACT_VERSION }}"
          body: "Auto generated: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          target_commitish: "${{ env.COMMIT_HASH }}"
          generate_release_notes: true
          tag_name: "v${{ env.ARTIFACT_VERSION }}"
          repository: "${{ github.repository }}"
          token: ${{ secrets.GH_REPO_READER_TOKEN }}
          append_body: true

  update-partior-tag:
    needs: [ read-config, ci-build ]
    if: needs.read-config.outputs.TAG-PARTIOR-STABLE == 'true' && (needs.read-config.outputs.PREPARE-RELEASE == 'true' || needs.read-config.outputs.TAG-VERSION == 'true')
    uses: partior-libs/controller-3p-pipelines/.github/workflows/pipeline-template-update-partior-stable.yaml@main
    with:
      TARGET-REFERENCE: v${{ needs.ci-build.outputs.ARTIFACT-VERSION }}
      SKIP-APPROVAL: true
    secrets: inherit
