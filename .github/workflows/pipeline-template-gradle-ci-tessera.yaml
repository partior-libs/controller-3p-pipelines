on:
  workflow_call:
    inputs:
      CONTROLLER-REPO: 
        required: true
        type: string
      CONTROLLER-REF:
        required: false
        type: string
        default: partior-stable
      PROJECT-REPO:
        required: true
        type: string

env:
  YAML_CONFIG_IMPORTER: yaml_importer_${{ github.run_id }}_${{ github.run_number }}
  YAML_BRANCH_CONFIG_IMPORTER: yaml_branch_importer_${{ github.run_id }}_${{ github.run_number }}
  ARTIFACT_VERSION_FILE: version_file_${{ github.run_id }}_${{ github.run_number }}
  GPG_SECRET_KEYS: ${{ secrets.GPG_SECRET_KEYS }}
  GPG_OWNERTRUST: ${{ secrets.GPG_OWNERTRUST }}
  TESSERA_DOCKER_IMAGE: tessera
  QUORUM_DOCKER_IMAGE: quorumengineering/quorum

jobs:
  read-repo:
    runs-on: ubuntu-latest
    outputs:
      BRANCH-NAME: ${{ steps.get-repo.outputs.branch-name }}
      REPO-NAME: ${{ steps.get-repo.outputs.name }}
      DELTA-COMMIT-MSG: ${{ steps.get-repo.outputs.delta-commit-msg }}
      COMMIT-HASH: ${{ steps.get-repo.outputs.commit-hash }}
      PR-NUM: ${{ steps.get-repo.outputs.pr-num }}
      PR-TARGET-BRANCH: ${{ steps.get-repo.outputs.pr-target-branch }}
      SOURCE-BRANCH: ${{ steps.get-repo.outputs.source-branch }}
      COMMIT-SHA: ${{ steps.get-repo.outputs.commit-sha }}
      FLATTEN-BRANCH: ${{ steps.get-repo.outputs.flatten-branch }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get repo details
        id: get-repo
        run: |
          branchName="$(echo ${GITHUB_REF_NAME} | cut -d'/' -f1)"
          sourceBranch=${GITHUB_REF_NAME}
          prTargetBranch='NIL'
          isPR=false
          commitMessages='NIL'
          commitHash=${GITHUB_SHA}
          prNum='NIL'
          if [[ ! -z "$GITHUB_HEAD_REF" ]]; then
            branchName=$(echo $GITHUB_HEAD_REF | cut -d"/" -f1)
            sourceBranch=${GITHUB_HEAD_REF}
            isPR=true
            prTargetBranch=remotes/origin/${GITHUB_BASE_REF}
            git fetch --all
            echo git log $prTargetBranch..HEAD
            commitMessages=$(git log $prTargetBranch..HEAD --pretty=format:"%s" | sed s/[\`\']//g | tr '\n' ' ' | xargs)
            commitHash=$(git log | grep "Merge.*into" | head -1 | xargs | cut -d" " -f2)
            prNum=$(echo $GITHUB_REF_NAME | cut -d"/" -f1)
          fi
          flattenBranch=${sourceBranch/\//_}
          echo [DEBUG] commitHash=${commitHash}
          echo "source-branch=${sourceBranch}" >> $GITHUB_OUTPUT
          echo "pr-num=${prNum}" >> $GITHUB_OUTPUT
          echo "pr-target-branch=${prTargetBranch}" >> $GITHUB_OUTPUT
          echo "commit-hash=${commitHash}" >> $GITHUB_OUTPUT
          echo "commit-sha=$(echo ${commitHash} | cut -c1-8 )" >> $GITHUB_OUTPUT
          echo "branch-name=${branchName}" >> $GITHUB_OUTPUT
          echo "name=$(echo ${GITHUB_REPOSITORY}  | cut -d"/" -f2)" >> $GITHUB_OUTPUT
          echo "delta-commit-msg=${commitMessages}" >> $GITHUB_OUTPUT
          echo "flatten-branch=${flattenBranch}" >> $GITHUB_OUTPUT

  read-config:
    runs-on: ubuntu-latest
    outputs:
      ENABLE-GITLEAKS: ${{ steps.pipeline-branch-config.outputs.gitleaks_enabled }}
      ARTIFACT-BASE-NAME: ${{ steps.pipeline-config.outputs.artifact-base-name }}
      ENABLE-BUILD: ${{ steps.check-compile-flag.outputs.ci-build_enabled }}
      ENABLE-ARTIFACT-PACKAGER: ${{ steps.pipeline-branch-config.outputs.artifact_packager_enabled }}
      PREPARE-RELEASE: ${{ steps.pipeline-branch-config.outputs.prepare-release_enabled }}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.CONTROLLER-REPO }}
          ref: ${{ inputs.CONTROLLER-REF }}
          token: ${{ secrets.GH_REPO_READER_TOKEN  }}

      - name: Get repo details
        id: get-repo
        run: |
          branchName="$(echo ${GITHUB_REF_NAME} | cut -d"/" -f1)"
          if [[ ! -z "$GITHUB_HEAD_REF" ]]; then
            branchName=$(echo $GITHUB_HEAD_REF | cut -d"/" -f1)
          fi 
          echo "branch-name=${branchName}" >> $GITHUB_OUTPUT
          echo "name=$(echo ${GITHUB_REPOSITORY}  | cut -d'/' -f2)" >> $GITHUB_OUTPUT

      - name: Generate CI config importer
        uses: partior-libs/gcs-yaml-importer@partior-stable
        with:
          yaml-file: projects/${{ steps.get-repo.outputs.name }}.yaml
          query-path: .3p-gradle.ci
          set-sub-default-keys: .3p-gradle.ci-default
          output-file: ${{ env.YAML_CONFIG_IMPORTER }}
          yaml-file-for-default: projects/3p-gradle-default.yaml
          query-path-for-default: .3p-gradle.ci
          upload: true

      - name: Start import pipeline config
        id: pipeline-config
        run: |
          echo Importing ...${{ env.YAML_CONFIG_IMPORTER }}
          source ./${{ env.YAML_CONFIG_IMPORTER }}

      - name: Generate CI branch config importer
        uses: partior-libs/gcs-yaml-importer@partior-stable
        with:
          yaml-file: projects/${{ steps.get-repo.outputs.name }}.yaml
          query-path: .3p-gradle.ci.branches.${{ steps.get-repo.outputs.branch-name }}
          set-sub-default-keys: .3p-gradle.ci.branches.default
          output-file: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          yaml-file-for-default: projects/3p-gradle-default.yaml
          query-path-for-default: .3p-gradle.ci.branches.default
          upload: true

      - name: Start import pipeline branch config
        id: pipeline-branch-config
        run: |
          echo Importing ...${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          source ./${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

  gitleaks:
    runs-on: ubuntu-latest
    needs: [ read-config ]
    if: needs.read-config.outputs.ENABLE-GITLEAKS == 'true'
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - name: Start import pipeline branch config
        id: pipeline-config
        run: |
          echo Importing ...${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          source ./${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - uses: actions/checkout@v3
        with:
          fetch-depth: ${{ steps.pipeline-branch-config.outputs.gitleaks_scan-depth }}

      - name: Fetch git details if PR
        if: ${{ github.event.name }} == 'pull_request'
        run: |
          echo [INFO] Git Fetching.. [$GITHUB_BASE_REF]
          git fetch origin $GITHUB_BASE_REF

      - name: gitleaks-action
        uses: partior-libs/gcs-gitleaks-scan@partior-stable

  check-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v1
        with:
          java-version: 17
      - run: ./gradlew dependencyCheckAnalyze -x test

  ci-build:
    needs: [ read-repo, read-config ]
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{ needs.read-repo.outputs.BRANCH-NAME }}
      ALL_DELTA_COMMIT_MSG: ${{ needs.read-repo.outputs.DELTA-COMMIT-MSG }}
      ARTIFACT_BASE_NAME: ${{ needs.read-config.outputs.ARTIFACT-BASE-NAME }}
      COMMIT_HASH: ${{ needs.read-repo.outputs.COMMIT-HASH }}
      PR_NUMBER: ${{ needs.read-repo.outputs.PR-NUM }}
      PR_TARGET_BRANCH: ${{ needs.read-repo.outputs.PR-TARGET-BRANCH }}
      SOURCE_BRANCH: ${{ needs.read-repo.outputs.SOURCE-BRANCH }}
    outputs:
      ARTIFACT-VERSION: ${{ steps.version-bot.outputs.artifact-version-name }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - name: Start import pipeline branch config
        id: pipeline-branch-config
        run: |
          echo Importing ...${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          source ./${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.YAML_CONFIG_IMPORTER }}


      - name: Setup jfrog
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: 2.50.4
        env:
          JF_ENV_1: ${{ secrets.JFROG_ARTIFACTORY_CONFIG }}

      - name: Get Temporary Access Token
        run: |
          accessUsername=$(jf config show | grep "User:" | awk -F'[\t ]+' '{print $2}' | head -n 1)
          accessToken=$(jf rt access-token-create | jq -r .access_token)
          echo "ARTIFACTORY_TMP_USERNAME=${accessUsername}" >> ${GITHUB_ENV}
          echo "ARTIFACTORY_TMP_TOKEN=${accessToken}" >> ${GITHUB_ENV}
          echo "::add-mask::${accessToken}"
          echo "[INFO] accessUsername: $accessUsername"

      - name: Setup Java ${{ steps.pipeline-branch-config.outputs.java-version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: ${{ steps.pipeline-branch-config.outputs.java-version }}
          
      - name: Setup Jfrog Gradle Config
        if: steps.pipeline-branch-config.outputs.compile_gradle_enabled == 'true'
        run: |
          ## Execute gradle with jfrog cli
          jfrogServerID="${{ steps.pipeline-branch-config.outputs.artifact_packager_jfrog-config-id }}"
          gradleRepoResolve="${{ steps.pipeline-branch-config.outputs.artifact_packager_artifactory-repo }}"
          gradleRepoDeploy="${{ steps.pipeline-branch-config.outputs.artifact_packager_artifactory-repo }}"
          echo "[DEBUG] Jfrog Server ID: $jfrogServerID"
          echo "[DEBUG] Gradle Resolve Repo: $gradleRepoResolve"
          echo "[DEBUG] Gradle Deploy Repo: $gradleRepoDeploy"
          jf gradlec --server-id-resolve="$jfrogServerID" --server-id-deploy="$jfrogServerID" --repo-resolve="$gradleRepoResolve" --repo-deploy="$gradleRepoDeploy" --deploy-maven-desc=true --deploy-ivy-desc=true --use-wrapper=true

      - name: Get last tag from original source
        id: get-tag
        #if: steps.pipeline-branch-config.outputs.artifact_packager_enabled == 'true' || steps.pipeline-branch-config.outputs.tag-version_git_enabled == 'true' || steps.pipeline-branch-config.outputs.prepare-release_enabled == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_REPO_READER_TOKEN }}
        run: |
          #!/bin/bash
          set +e

          upstreamTagChecker=${{ steps.pipeline-branch-config.outputs.origin-tag-checker_upstream_enabled }}
          upstreamTagApiUrl=${{ steps.pipeline-branch-config.outputs.origin-tag-checker_upstream_api-url }}
          upstreamTagShaChecker=${{ steps.pipeline-branch-config.outputs.origin-tag-checker_upstream_verify-sha_enabled }}
          localFileTagChecker=${{ steps.pipeline-branch-config.outputs.origin-tag-checker_local-file_enabled }}
          localFileTagCheckerFile=${{ steps.pipeline-branch-config.outputs.origin-tag-checker_local-file_file }}

          echo "[DEBUG] upstreamTagChecker=$upstreamTagChecker"
          echo "[DEBUG] upstreamTagApiUrl=$upstreamTagApiUrl"
          echo "[DEBUG] upstreamTagShaChecker=$upstreamTagShaChecker"
          echo "[DEBUG] localFileTagChecker=$localFileTagChecker"
          echo "[DEBUG] localFileTagCheckerFile=$localFileTagCheckerFile"

          lastTag=partior-patch

          if [[ "$localFileTagChecker" == "true" ]]; then
            if [[ ! -f "$localFileTagCheckerFile" ]]; then
              echo "[ERROR] Unable to locate tag checker file: $localFileTagCheckerFile"
              exit 1
            fi
            lastTag=$(cat $localFileTagCheckerFile | sed 's/-SNAPSHOT//g' | xargs)
            lastTag=${lastTag}_patch
          fi

          if [[ "$upstreamTagChecker" == "true" ]] && [[ "$upstreamTagShaChecker" == "true" ]]; then
            tagListFile=taglist.txt
            gh api $upstreamTagApiUrl --jq '.[] | select(.name | test("^tessera-[0-9]+\\.[0-9]+\\.[0-9]+$")) | [.name,.commit.sha] | join(",")' > $tagListFile
            
            for eachTagInfo in $(cat $tagListFile); 
            do
              currentTagName=$(echo $eachTagInfo | cut -d"," -f1 | xargs)
              currentTagSha=$(echo $eachTagInfo | cut -d"," -f2 | xargs)
              echo "[INFO] Checking currentTagSha for tag $currentTagName"
              if (git cat-file -e $currentTagSha); then 
                echo "[INFO] Found SHA hash";
                lastTag=$(echo $currentTagName | sed "s/tessera-//g")
                lastTag=${lastTag}_patch
                break
              else 
                echo "[INFO] SHA hash not found.";
              fi
            done
          elif [[ "$upstreamTagChecker" == "true" ]] && [[ "$upstreamTagShaChecker" == "false" ]]; then
            lastTag=$(gh api $upstreamTagApiUrl --jq '.[] | select(.name | test("^tessera-[0-9]+\\.[0-9]+\\.[0-9]+$")) | .name' | head -n1 | xargs)
            lastTag=$(echo $lastTag | sed "s/tessera-//g")
            lastTag=${lastTag}_patch
          fi

          echo "[INFO] Last tag found: $lastTag"
          echo "TESSERA-VERSION=$lastTag" > ./app-version.cfg
          echo "last-tag=$lastTag" >> $GITHUB_OUTPUT

      - name: Start versioning bot
        #if: steps.pipeline-branch-config.outputs.artifact_packager_enabled == 'true' || steps.pipeline-branch-config.outputs.tag-version_git_enabled == 'true' || steps.pipeline-branch-config.outputs.prepare-release_enabled == 'true'
        id: version-bot
        uses: partior-libs/gcs-versioning-bot@partior-stable
        with:
          jfrog-token: ${{ secrets.JFROG_ARTIFACTORY_CONFIG }}
          versioning-rules-importer-file: ${{ env.YAML_CONFIG_IMPORTER }}
          branch-packager-rules-importer-file: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          consolidated-commit-msg: ${{ env.DELTA-COMMIT-MSG }}
          jira-username: ${{ secrets.JIRA_USERNAME }}
          jira-password: ${{ secrets.JIRA_PASSWORD }}
          debug: true

      - name: Cache Gradle packages
        if: steps.pipeline-branch-config.outputs.compile_gradle_enabled == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Grant execute permission for gradlew
        if: steps.pipeline-branch-config.outputs.compile_gradle_enabled == 'true'
        run: chmod +x gradlew

      - name: Tweak build config for Partior pipeline
        run: |
          ## Changes needed for Partior build
          groupName="${{ steps.pipeline-branch-config.outputs.artifact_packager_group }}"
          lastTag="${{ steps.get-tag.outputs.last-tag }}"
          echo "[INFO] groupName=$groupName"
          echo "[INFO] lastTag=$lastTag"
          echo "[INFO] version=${{ steps.version-bot.outputs.artifact-version-name }}"
          echo "${{ steps.version-bot.outputs.artifact-version-name }}" > version.txt
          find tessera-jaxrs -type f  -name build.gradle | xargs -i grep -lE "^resolve {" {} | xargs -i sed -i "s/^resolve {/tasks.resolve {/g" {}
          sed -i "s/net.consensys.quorum.tessera/$groupName/g" build.gradle

      # Run the build 
      - name: Build
        run: |
          ## Fix build issue with jfrog apiVersion: v1
          find tessera-jaxrs -type f  -name build.gradle | xargs -i grep -lE "^resolve {" {} | xargs -i sed -i "s/^resolve {/tasks.resolve {/g" {}
          
          jf gradle build -x dependencyCheckAnalyze -x javadoc -x test --info

      - name: Upload kalium encryptor dist
        uses: actions/upload-artifact@v3
        with:
          name: kalium-dist
          path: /home/runner/work/tessera/tessera/encryption/encryption-kalium/build/distributions/

      - name: Publish to artifactory
        if: steps.pipeline-branch-config.outputs.artifact_packager_enabled == 'true'
        run: |
          ## Setting up GPG keys
          echo "${GPG_SECRET_KEYS}" | base64 --decode | gpg --import --no-tty --batch --yes
          echo ${GPG_OWNERTRUST} | base64 --decode | gpg --import-ownertrust
          gpg -k
          pubkey=`gpg --list-keys -a techservices-devsecops@partior.com|head -2|tail -1|xargs`
          echo "[DEBUG] Pubkey: $pubkey"

          echo "[INFO] Upload to Artifactory"
          jf gradle clean artifactoryPublish -Psigning.gnupg.keyName=$pubkey -Pversion=${{ steps.version-bot.outputs.artifact-version-name }}  --build-name "Gradle CI - ${{ env.ARTIFACT_BASE_NAME }}" --build-number ${GITHUB_RUN_NUMBER}.${GITHUB_RUN_ATTEMPT} 
                    
          jf rt bp "Gradle CI - ${{ env.ARTIFACT_BASE_NAME }}" "${GITHUB_RUN_NUMBER}.${GITHUB_RUN_ATTEMPT}"

      - name: Copy artifacts from gradle to generic
        if: steps.pipeline-branch-config.outputs.artifact_packager_enabled == 'true'
        run: |
          sourceRepo="${{ steps.pipeline-branch-config.outputs.artifact_packager_artifactory-repo }}"
          targetRepo=$(echo $sourceRepo | sed "s/gradle/generic/g")
          if [[ ! "$targetRepo" == *"-local" ]]; then
            targetRepo=$targetRepo-local
          fi
          groupNameID="${{ steps.pipeline-branch-config.outputs.artifact_packager_group }}"
          groupNamePath=$(echo $groupNameID | sed "s/\./\//g")
          version=${{ steps.version-bot.outputs.artifact-version-name }}
          echo "[INFO] Copying from gradle to generic repo..."
          echo "[INFO] jf rt cp --flat=true $sourceRepo/$groupNamePath/tessera-dist/$version/tessera-dist-$version.jar $targetRepo/tessera-dist/$version/tessera-dist-$version.jar"
          echo "[INFO] jf rt cp --flat=true $sourceRepo/$groupNamePath/tessera-dist/$version/tessera-dist-$version.tar $targetRepo/tessera-dist/$version/tessera-dist-$version.tar"
          echo "[INFO] jf rt cp --flat=true $sourceRepo/$groupNamePath/hashicorp-key-vault/$version/hashicorp-key-vault-$version.jar $targetRepo/hashicorp-key-vault/$version/hashicorp-key-vault-$version.jar"
          echo "[INFO] jf rt cp --flat=true $sourceRepo/$groupNamePath/hashicorp-key-vault/$version/hashicorp-key-vault-$version.tar $targetRepo/hashicorp-key-vault/$version/hashicorp-key-vault-$version.jar"

          jf rt cp --flat=true $sourceRepo/$groupNamePath/tessera-dist/$version/tessera-dist-$version.jar $targetRepo/tessera-dist/$version/tessera-dist-$version.jar
          jf rt cp --flat=true $sourceRepo/$groupNamePath/tessera-dist/$version/tessera-dist-$version.tar $targetRepo/tessera-dist/$version/tessera-dist-$version.tar
          jf rt cp --flat=true $sourceRepo/$groupNamePath/hashicorp-key-vault/$version/hashicorp-key-vault-$version.jar $targetRepo/hashicorp-key-vault/$version/hashicorp-key-vault-$version.jar
          jf rt cp --flat=true $sourceRepo/$groupNamePath/hashicorp-key-vault/$version/hashicorp-key-vault-$version.tar $targetRepo/hashicorp-key-vault/$version/hashicorp-key-vault-$version.tar

      - name: Upload tessera dist
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: tessera-dists
          path: /home/runner/work/tessera/tessera/tessera-dist/build/distributions/
      - name: Upload tessera enclave dist
        uses: actions/upload-artifact@v3
        with:
          name: enclave-dists
          path: /home/runner/work/tessera/tessera/enclave/enclave-jaxrs/build/distributions/
      - name: Upload aws key vault dist
        uses: actions/upload-artifact@v3
        with:
          name: aws-key-vault-dist
          path: /home/runner/work/tessera/tessera/key-vault/aws-key-vault/build/distributions/
      - name: Upload azure key vault dist
        uses: actions/upload-artifact@v3
        with:
          name: azure-key-vault-dist
          path: /home/runner/work/tessera/tessera/key-vault/azure-key-vault/build/distributions/
      - name: Upload hashicorp key vault dist
        uses: actions/upload-artifact@v3
        with:
          name: hashicorp-key-vault-dist
          path: /home/runner/work/tessera/tessera/key-vault/hashicorp-key-vault/build/distributions/

      # - name: Git config
      #   if: steps.pipeline-branch-config.outputs.tag-version_git_enabled == 'true'
      #   run: |
      #     git config user.name github-actions
      #     git config user.email github-actions@github.com

      # - name: Create new tag
      #   if: steps.pipeline-branch-config.outputs.tag-version_git_enabled == 'true'
      #   run: git tag -f v${{ steps.version-bot.outputs.artifact-version-name }}

      # - name: Push new tag
      #   if: steps.pipeline-branch-config.outputs.tag-version_git_enabled == 'true'
      #   run: git push origin v${{ steps.version-bot.outputs.artifact-version-name }} --force

  spotbugs:
    name: Spotbugs
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code from SCM
      uses: actions/checkout@v3
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: 17
        check-latest: true
    - name: Execute gradle test
      run: ./gradlew test -x dependencyCheckAnalyze -x :tests:acceptance-test:test -x javadoc --info

    - name: Run Codacy Analysis CLI
      uses: codacy/codacy-analysis-cli-action@master
      with:
        # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
        # You can also omit the token and run the tools that support default configurations
        api-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        verbose: true
        tool: spotbugs
        skip-uncommitted-files-check: true
        upload: true
        skip-container-engine-check: true

  test:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code from SCM
      uses: actions/checkout@v3
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: 17
        check-latest: true
    - name: Execute gradle test
      run: ./gradlew test -x dependencyCheckAnalyze -x :tests:acceptance-test:test -x javadoc --info

  itest:
    name: Integration tests
    needs: [ci-build]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code from SCM
      uses: actions/checkout@v3
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: 17
        check-latest: true
    - name: Download tessera dist
      uses: actions/download-artifact@v3
      with:
        name: tessera-dists
        path: /home/runner/work/tessera/tessera/tessera-dist/build/distributions/
    - name: Download tessera enclave dist
      uses: actions/download-artifact@v3
      with:
        name: enclave-dists
        path: /home/runner/work/tessera/tessera/enclave/enclave-jaxrs/build/distributions/
    - name: Download aws key vault dist
      uses: actions/download-artifact@v3
      with:
        name: aws-key-vault-dist
        path: /home/runner/work/tessera/tessera/key-vault/aws-key-vault/build/distributions/
    - name: Download azure key vault dist
      uses: actions/download-artifact@v3
      with:
        name: azure-key-vault-dist
        path: /home/runner/work/tessera/tessera/key-vault/azure-key-vault/build/distributions/
    - name: Download hashicorp key vault dist
      uses: actions/download-artifact@v3
      with:
        name: hashicorp-key-vault-dist
        path: /home/runner/work/tessera/tessera/key-vault/hashicorp-key-vault/build/distributions/
    - name: Download kalium encryptor dist
      uses: actions/download-artifact@v3
      with:
        name: kalium-dist
        path: /home/runner/work/tessera/tessera/encryption/encryption-kalium/build/distributions/
    - name: Execute gradle integration tests
      run: |
        echo "${{ needs.ci-build.outputs.ARTIFACT-VERSION }}" > version.txt
        ./gradlew :tests:acceptance-test:clean :tests:acceptance-test:test --fail-fast -PexcludeTests="RunHashicorpIT,AwsKeyVaultIT,RecoverIT,RunAzureIT,RestSuiteHttpH2RemoteEnclaveEncTypeEC,CucumberTestSuite" --info
    - name: Upload Junit reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
       name: itest-junit-report
       path: /home/runner/work/tessera/tessera/tests/acceptance-test/build/reports/tests/
    - name: Upload test logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
       name: itest-logs
       path: /home/runner/work/tessera/tessera/tests/acceptance-test/build/logs

  remote_enclave_itest:
    name: Remote enclave integration tests
    needs: [ci-build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from SCM
        uses: actions/checkout@v3
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: 17
          check-latest: true
      - name: Download tessera dist
        uses: actions/download-artifact@v3
        with:
          name: tessera-dists
          path: /home/runner/work/tessera/tessera/tessera-dist/build/distributions/
      - name: Download tessera enclave dist
        uses: actions/download-artifact@v3
        with:
          name: enclave-dists
          path: /home/runner/work/tessera/tessera/enclave/enclave-jaxrs/build/distributions/
      - name: Download aws key vault dist
        uses: actions/download-artifact@v3
        with:
          name: aws-key-vault-dist
          path: /home/runner/work/tessera/tessera/key-vault/aws-key-vault/build/distributions/
      - name: Download azure key vault dist
        uses: actions/download-artifact@v3
        with:
          name: azure-key-vault-dist
          path: /home/runner/work/tessera/tessera/key-vault/azure-key-vault/build/distributions/
      - name: Download hashicorp key vault dist
        uses: actions/download-artifact@v3
        with:
          name: hashicorp-key-vault-dist
          path: /home/runner/work/tessera/tessera/key-vault/hashicorp-key-vault/build/distributions/
      - name: Download kalium encryptor dist
        uses: actions/download-artifact@v3
        with:
          name: kalium-dist
          path: /home/runner/work/tessera/tessera/encryption/encryption-kalium/build/distributions/
      - name: Execute gradle integration tests
        run: |
          echo "${{ needs.ci-build.outputs.ARTIFACT-VERSION }}" > version.txt
          ./gradlew :tests:acceptance-test:test --tests RestSuiteHttpH2RemoteEnclave --tests RestSuiteHttpH2RemoteEnclaveEncTypeEC --info
      - name: Upload junit reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: remote_enclave_itest-junit-report
          path: /home/runner/work/tessera/tessera/tests/acceptance-test/build/reports/tests/
      - name: Upload test logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: remote_enclave_itest-logs
          path: /home/runner/work/tessera/tessera/tests/acceptance-test/build/logs

  cucumber_itest:
    name: Cucumber itests
    needs: [ci-build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from SCM
        uses: actions/checkout@v3
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: 17
          check-latest: true
      - name: Download tessera dist
        uses: actions/download-artifact@v3
        with:
          name: tessera-dists
          path: /home/runner/work/tessera/tessera/tessera-dist/build/distributions/
      - name: Download tessera enclave dist
        uses: actions/download-artifact@v3
        with:
          name: enclave-dists
          path: /home/runner/work/tessera/tessera/enclave/enclave-jaxrs/build/distributions/
      - name: Download aws key vault dist
        uses: actions/download-artifact@v3
        with:
          name: aws-key-vault-dist
          path: /home/runner/work/tessera/tessera/key-vault/aws-key-vault/build/distributions/
      - name: Download azure key vault dist
        uses: actions/download-artifact@v3
        with:
          name: azure-key-vault-dist
          path: /home/runner/work/tessera/tessera/key-vault/azure-key-vault/build/distributions/
      - name: Download hashicorp key vault dist
        uses: actions/download-artifact@v3
        with:
          name: hashicorp-key-vault-dist
          path: /home/runner/work/tessera/tessera/key-vault/hashicorp-key-vault/build/distributions/
      - name: Download kalium encryptor dist
        uses: actions/download-artifact@v3
        with:
          name: kalium-dist
          path: /home/runner/work/tessera/tessera/encryption/encryption-kalium/build/distributions/
      - name: Execute gradle
        run: |
          echo "${{ needs.ci-build.outputs.ARTIFACT-VERSION }}" > version.txt
          ## Disable CLI test because this is Partior's build version
          sed -i "s/CucumberVersionCliIT.class//g" tests/acceptance-test/src/test/java/com/quorum/tessera/test/CucumberTestSuite.java

          ./gradlew :tests:acceptance-test:clean :tests:acceptance-test:test --tests CucumberTestSuite --info
      - name: Upload junit reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cucumber_itest-junit-report
          path: /home/runner/work/tessera/tessera/tests/acceptance-test/build/reports/tests/
      - name: Upload test logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cucumber_itest-logs
          path: /home/runner/work/tessera/tessera/tests/acceptance-test/build/logs

  vaultTests:
    name: Key vault integration tests
    needs: [ci-build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from SCM
        uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: 17
          check-latest: true
      - name: Download tessera dist
        uses: actions/download-artifact@v3
        with:
          name: tessera-dists
          path: /home/runner/work/tessera/tessera/tessera-dist/build/distributions/
      - name: Download tessera enclave dist
        uses: actions/download-artifact@v3
        with:
          name: enclave-dists
          path: /home/runner/work/tessera/tessera/enclave/enclave-jaxrs/build/distributions/
      - name: Download aws key vault dist
        uses: actions/download-artifact@v3
        with:
          name: aws-key-vault-dist
          path: /home/runner/work/tessera/tessera/key-vault/aws-key-vault/build/distributions/
      - name: Download azure key vault dist
        uses: actions/download-artifact@v3
        with:
          name: azure-key-vault-dist
          path: /home/runner/work/tessera/tessera/key-vault/azure-key-vault/build/distributions/
      - name: Download hashicorp key vault dist
        uses: actions/download-artifact@v3
        with:
          name: hashicorp-key-vault-dist
          path: /home/runner/work/tessera/tessera/key-vault/hashicorp-key-vault/build/distributions/
      - name: Download kalium encryptor dist
        uses: actions/download-artifact@v3
        with:
          name: kalium-dist
          path: /home/runner/work/tessera/tessera/encryption/encryption-kalium/build/distributions/
      - name: Run AWS tests
        run: |
          echo "${{ needs.ci-build.outputs.ARTIFACT-VERSION }}" > version.txt
          ./gradlew :tests:acceptance-test:test --tests AwsKeyVaultIT --info
#      - name: Run azure tests
#        run: |
#          ./gradlew :tests:acceptance-test:test --tests RunAzureIT --info
      - name: Run hashicorp tests
        run: |
          wget https://releases.hashicorp.com/vault/1.2.2/vault_1.2.2_linux_amd64.zip -O /tmp/vault_1.2.2_linux_amd64.zip
          mkdir -p vault/bin && pushd $_
          unzip /tmp/vault_1.2.2_linux_amd64.zip
          export PATH=$PATH:$PWD && popd
          ./gradlew :tests:acceptance-test:test --tests RunHashicorpIT --info
      - name: Upload junit reports
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: vault-itest-junit-report
          path: /home/runner/work/tessera/tessera/tests/acceptance-test/build/reports/tests/
      - name: Upload test logs
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: vault-itest-logs
          path: /home/runner/work/tessera/tessera/tests/acceptance-test/build/logs

  recovery_itest:
    name: Recovery integration tests
    needs: [ci-build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from SCM
        uses: actions/checkout@v3
      - name: Set up java
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: 17
          check-latest: true
      - name: Download tessera dist
        uses: actions/download-artifact@v3
        with:
          name: tessera-dists
          path: /home/runner/work/tessera/tessera/tessera-dist/build/distributions/
      - name: Download tessera enclave dist
        uses: actions/download-artifact@v3
        with:
          name: enclave-dists
          path: /home/runner/work/tessera/tessera/enclave/enclave-jaxrs/build/distributions/
      - name: Download aws key vault dist
        uses: actions/download-artifact@v3
        with:
          name: aws-key-vault-dist
          path: /home/runner/work/tessera/tessera/key-vault/aws-key-vault/build/distributions/
      - name: Download azure key vault dist
        uses: actions/download-artifact@v3
        with:
          name: azure-key-vault-dist
          path: /home/runner/work/tessera/tessera/key-vault/azure-key-vault/build/distributions/
      - name: Download hashicorp key vault dist
        uses: actions/download-artifact@v3
        with:
          name: hashicorp-key-vault-dist
          path: /home/runner/work/tessera/tessera/key-vault/hashicorp-key-vault/build/distributions/
      - name: Download kalium encryptor dist
        uses: actions/download-artifact@v3
        with:
          name: kalium-dist
          path: /home/runner/work/tessera/tessera/encryption/encryption-kalium/build/distributions/
      - name: Execute tests
        run: |
          echo "${{ needs.ci-build.outputs.ARTIFACT-VERSION }}" > version.txt
          ./gradlew :tests:acceptance-test:clean :tests:acceptance-test:test --tests RecoverIT --info
      - name: Upload junit reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: recovery_itest-junit-report
          path: /home/runner/work/tessera/tessera/tests/acceptance-test/build/reports/tests/
      - name: Upload test logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: recovery-itest-logs
          path: /home/runner/work/tessera/tessera/tests/acceptance-test/build/logs

  build_image:
    name: Build develop Docker image
    needs: [ci-build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from SCM
        uses: actions/checkout@v3
      - name: Download tessera dist
        uses: actions/download-artifact@v3
        with:
          name: tessera-dists
          path: /home/runner/work/tessera/tessera/tessera-dist/build/distributions/
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Get current date-time (RFC 3339 standard)
        id: date
        run: echo "::set-output name=now::$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
      - name: Build Docker image as portable tar
        uses: docker/build-push-action@v2
        with:
          tags: ${{ env.TESSERA_DOCKER_IMAGE }}:develop
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.date.outputs.now }}
          push: false
          file: docker/tessera.Dockerfile
          # context must be explicitly provided to prevent docker/build-push-action checking out the repo again and deleting the downloaded artifacts
          context: .
          outputs: type=docker,dest=/tmp/tessera-develop-image.tar
      - name: upload-artifact portable Docker image
        uses: actions/upload-artifact@v3
        with:
          name: tessera-develop-image
          path: /tmp/tessera-develop-image.tar

  atest:
    name: Quorum acceptance tests
    needs: [ci-build, build_image]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from SCM
        uses: actions/checkout@v3
      - name: Set up java
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: 14
          check-latest: true
      - name: download-artifact portable Docker image
        uses: actions/download-artifact@v3
        with:
          name: tessera-develop-image
          path: /tmp
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Load image
        run: |
          docker load --input /tmp/tessera-develop-image.tar
          docker image ls -a
      - name: Execute acceptance tests
        run:
          docker run --entrypoint /bin/sh --network host -v /tmp/run/sh:/tmp/run.sh -v /var/run/docker.sock:/var/run/docker.sock -v /tmp/acctests:/tmp/acctests -e TF_VAR_tessera_docker_image='{name="${{ env.TESSERA_DOCKER_IMAGE }}:develop",local=true}' -e TF_VAR_quorum_docker_image='{name="${{ env.QUORUM_DOCKER_IMAGE }}:latest",local=false}' quorumengineering/acctests:latest -c "./mvnw --no-transfer-progress -B -DskipToolsCheck test -Pauto -Dtags='\!async && (basic || basic-istanbul || networks/typical::istanbul)' -Dauto.outputDir=/tmp/acctests -Dnetwork.forceDestroy=true && cp -R /workspace/target/gauge /tmp/acctests/gauge && chmod -R 775 /tmp/acctests/gauge"
      - name: Upload Gauge report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: gauge-reports
          path: /tmp/acctests/gauge

  # release-docker:
  #   needs: [ ci-build ]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code from SCM
  #       uses: actions/checkout@v3
  #     - name: Download tessera dists
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: tessera-dists
  #         path: tessera-dist/build/distributions/
  #     - name: Download enclave dists
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: enclave-dists
  #         path: enclave/enclave-jaxrs/build/distributions/
  #     - name: Download azure-key-vault dists
  #       uses: actions/download-artifact@v3
  #       if: success()
  #       with:
  #         name: azure-key-vault-dists
  #         path: key-vault/azure-key-vault/build/distributions/
  #     - name: Download aws-key-vault dists
  #       uses: actions/download-artifact@v3
  #       if: success()
  #       with:
  #         name: aws-key-vault-dists
  #         path: key-vault/aws-key-vault/build/distributions/
  #     - name: Download hashicorp-key-vault dists
  #       uses: actions/download-artifact@v3
  #       if: success()
  #       with:
  #         name: hashicorp-key-vault-dists
  #         path: key-vault/hashicorp-key-vault/build/distributions/
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #     - name: Login to DockerHub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
  #     - name: Get current date-time (RFC 3339 standard)
  #       id: date
  #       run: |
  #         echo "::set-output name=now::$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
  #     - name: Build and push standalone tessera images
  #       uses: docker/build-push-action@v2
  #       with:
  #         tags: |
  #           ${{ env.TESSERA_DOCKER_IMAGE_NAME }}:latest
  #           ${{ env.TESSERA_DOCKER_IMAGE_NAME }}:${{ needs.check-version.outputs.minor-version }}
  #           ${{ env.TESSERA_DOCKER_IMAGE_NAME }}:${{ needs.check-version.outputs.full-version }}
  #         labels: |
  #           org.opencontainers.image.source=https://github.com/${{ github.repository }}
  #           org.opencontainers.image.revision=${{ github.sha }}
  #           org.opencontainers.image.created=${{ steps.date.outputs.now }}
  #         push: true
  #         file: docker/tessera.Dockerfile
  #         # context must be explicitly provided to prevent docker/build-push-action checking out the repo again and deleting the downloaded artifacts
  #         context: .
  #     - name: Build and push tessera+azure images
  #       uses: docker/build-push-action@v2
  #       with:
  #         tags: |
  #           ${{ env.TESSERA_DOCKER_IMAGE_NAME }}:azure-latest
  #           ${{ env.TESSERA_DOCKER_IMAGE_NAME }}:azure-${{ needs.check-version.outputs.minor-version }}
  #           ${{ env.TESSERA_DOCKER_IMAGE_NAME }}:azure-${{ needs.check-version.outputs.full-version }}
  #         labels: |
  #           org.opencontainers.image.source=https://github.com/${{ github.repository }}
  #           org.opencontainers.image.revision=${{ github.sha }}
  #           org.opencontainers.image.created=${{ steps.date.outputs.now }}
  #         push: true
  #         file: docker/tessera.azure.Dockerfile
  #         # context must be explicitly provided to prevent docker/build-push-action checking out the repo again and deleting the downloaded artifacts
  #         context: .
  #     - name: Build and push tessera+aws images
  #       uses: docker/build-push-action@v2
  #       with:
  #         tags: |
  #           ${{ env.TESSERA_DOCKER_IMAGE_NAME }}:aws-latest
  #           ${{ env.TESSERA_DOCKER_IMAGE_NAME }}:aws-${{ needs.check-version.outputs.minor-version }}
  #           ${{ env.TESSERA_DOCKER_IMAGE_NAME }}:aws-${{ needs.check-version.outputs.full-version }}
  #         labels: |
  #           org.opencontainers.image.source=https://github.com/${{ github.repository }}
  #           org.opencontainers.image.revision=${{ github.sha }}
  #           org.opencontainers.image.created=${{ steps.date.outputs.now }}
  #         push: true
  #         file: docker/tessera.aws.Dockerfile
  #         # context must be explicitly provided to prevent docker/build-push-action checking out the repo again and deleting the downloaded artifacts
  #         context: .
  #     - name: Build and push tessera+hashicorp images
  #       uses: docker/build-push-action@v2
  #       with:
  #         tags: |
  #           ${{ env.TESSERA_DOCKER_IMAGE_NAME }}:hashicorp-latest
  #           ${{ env.TESSERA_DOCKER_IMAGE_NAME }}:hashicorp-${{ needs.check-version.outputs.minor-version }}
  #           ${{ env.TESSERA_DOCKER_IMAGE_NAME }}:hashicorp-${{ needs.check-version.outputs.full-version }}
  #         labels: |
  #           org.opencontainers.image.source=https://github.com/${{ github.repository }}
  #           org.opencontainers.image.revision=${{ github.sha }}
  #           org.opencontainers.image.created=${{ steps.date.outputs.now }}
  #         push: true
  #         file: docker/tessera.hashicorp.Dockerfile
  #         # context must be explicitly provided to prevent docker/build-push-action checking out the repo again and deleting the downloaded artifacts
  #         context: .
  #     - name: Build and push standalone enclave images
  #       uses: docker/build-push-action@v2
  #       with:
  #         tags: |
  #           ${{ env.TESSERA_DOCKER_IMAGE_NAME }}:enclave-latest
  #           ${{ env.TESSERA_DOCKER_IMAGE_NAME }}:enclave-${{ needs.check-version.outputs.minor-version }}
  #           ${{ env.TESSERA_DOCKER_IMAGE_NAME }}:enclave-${{ needs.check-version.outputs.full-version }}
  #         labels: |
  #           org.opencontainers.image.source=https://github.com/${{ github.repository }}
  #           org.opencontainers.image.revision=${{ github.sha }}
  #           org.opencontainers.image.created=${{ steps.date.outputs.now }}
  #         push: true
  #         file: docker/enclave.Dockerfile
  #         # context must be explicitly provided to prevent docker/build-push-action checking out the repo again and deleting the downloaded artifacts
  #         context: .

  prepare-release:
      runs-on: ubuntu-latest
      needs: [ read-repo, read-config, ci-build ]
      if: needs.read-config.outputs.PREPARE-RELEASE == 'true'
      env:
        ARTIFACT_BASE_NAME: ${{ needs.read-config.outputs.ARTIFACT-BASE-NAME }}
        ARTIFACT_VERSION: ${{ needs.ci-build.outputs.ARTIFACT-VERSION }}
        BRANCH_NAME: ${{ needs.read-repo.outputs.BRANCH-NAME }}
        COMMIT_HASH: ${{ needs.read-repo.outputs.COMMIT-HASH }}
        REPO_NAME: ${{ needs.read-repo.outputs.REPO-NAME }}
        
      steps:
      - name: Tag release version on code baseline
        uses: partior-libs/gcs-pipe-utils/actions/generic-git-tag@partior-stable
        with: 
          target-repo: "${{ github.repository }}"
          artifact-version: "${{ env.ARTIFACT_VERSION }}"
          target-repo-ref: "${{ env.COMMIT_HASH }}"
          pat-token: ${{ secrets.GH_REPO_READER_TOKEN }}

      - name: Create release
        uses: partior-libs/gjs-create-release@partior-stable
        with:
          name: "v${{ env.ARTIFACT_VERSION }}"
          body: "Auto generated: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          target_commitish: "${{ env.COMMIT_HASH }}"
          generate_release_notes: true
          tag_name: "v${{ env.ARTIFACT_VERSION }}"
          repository: "${{ github.repository }}"
          token: ${{ secrets.GH_REPO_READER_TOKEN }}
          append_body: true
