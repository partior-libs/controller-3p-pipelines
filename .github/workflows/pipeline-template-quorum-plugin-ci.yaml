on:
  workflow_call:
    inputs:
      CONTROLLER-REPO: 
        required: true
        type: string
      CONTROLLER-REF:
        required: false
        type: string
        default: main
      PROJECT-REPO:
        required: true
        type: string

env:
  YAML_CONFIG_IMPORTER: yaml_importer_${{ github.run_id }}_${{ github.run_number }}
  YAML_BRANCH_CONFIG_IMPORTER: yaml_branch_importer_${{ github.run_id }}_${{ github.run_number }}
  ARTIFACT_VERSION_FILE: version_file_${{ github.run_id }}_${{ github.run_number }}

jobs:
  read-repo:
    runs-on: ubuntu-latest
    outputs:
      BRANCH-NAME: ${{ steps.get-repo.outputs.branch-name }}
      REPO-NAME: ${{ steps.get-repo.outputs.name }}
      DELTA-COMMIT-MSG: ${{ steps.get-repo.outputs.delta-commit-msg }}
      COMMIT-HASH: ${{ steps.get-repo.outputs.commit-hash }}
      PR-NUM: ${{ steps.get-repo.outputs.pr-num }}
      PR-TARGET-BRANCH: ${{ steps.get-repo.outputs.pr-target-branch }}
      SOURCE-BRANCH: ${{ steps.get-repo.outputs.source-branch }}
      COMMIT-SHA: ${{ steps.get-repo.outputs.commit-sha }}
      FLATTEN-BRANCH: ${{ steps.get-repo.outputs.flatten-branch }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get repo details
        id: get-repo
        run: |
          branchName="$(echo ${GITHUB_REF_NAME} | cut -d'/' -f1)"
          sourceBranch=${GITHUB_REF_NAME}
          prTargetBranch='NIL'
          isPR=false
          commitMessages='NIL'
          commitHash=${GITHUB_SHA}
          prNum='NIL'
          if [[ ! -z "$GITHUB_HEAD_REF" ]]; then
            branchName=$(echo $GITHUB_HEAD_REF | cut -d"/" -f1)
            sourceBranch=${GITHUB_HEAD_REF}
            isPR=true
            prTargetBranch=remotes/origin/${GITHUB_BASE_REF}
            git fetch --all
            echo git log $prTargetBranch..HEAD
            commitMessages=$(git log $prTargetBranch..HEAD --pretty=format:"%s" | sed s/[\`\']//g | tr '\n' ' ' | xargs)
            commitHash=$(git log | grep "Merge.*into" | head -1 | xargs | cut -d" " -f2)
            prNum=$(echo $GITHUB_REF_NAME | cut -d"/" -f1)
          fi
          flattenBranch=${sourceBranch/\//_}
          echo [DEBUG] commitHash=${commitHash}
          echo "source-branch=${sourceBranch}" >> $GITHUB_OUTPUT
          echo "pr-num=${prNum}" >> $GITHUB_OUTPUT
          echo "pr-target-branch=${prTargetBranch}" >> $GITHUB_OUTPUT
          echo "commit-hash=${commitHash}" >> $GITHUB_OUTPUT
          echo "commit-sha=$(echo ${commitHash} | cut -c1-8 )" >> $GITHUB_OUTPUT
          echo "branch-name=${branchName}" >> $GITHUB_OUTPUT
          echo "name=$(echo ${GITHUB_REPOSITORY}  | cut -d"/" -f2)" >> $GITHUB_OUTPUT
          echo "delta-commit-msg=${commitMessages}" >> $GITHUB_OUTPUT
          echo "flatten-branch=${flattenBranch}" >> $GITHUB_OUTPUT

  read-config:
    runs-on: ubuntu-latest
    outputs:
      ENABLE-GITLEAKS: ${{ steps.pipeline-branch-config.outputs.gitleaks_enabled }}
      ARTIFACT-BASE-NAME: ${{ steps.pipeline-config.outputs.artifact-base-name }}
      ENABLE-BUILD: ${{ steps.check-compile-flag.outputs.ci-build_enabled }}
      ENABLE-ARTIFACT-PACKAGER: ${{ steps.pipeline-branch-config.outputs.artifact_packager_enabled }}
      PREPARE-RELEASE: ${{ steps.pipeline-branch-config.outputs.prepare-release_enabled }}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.CONTROLLER-REPO }}
          ref: ${{ inputs.CONTROLLER-REF }}
          token: ${{ secrets.GH_REPO_READER_TOKEN  }}

      - name: Get repo details
        id: get-repo
        run: |
          branchName="$(echo ${GITHUB_REF_NAME} | cut -d"/" -f1)"
          if [[ ! -z "$GITHUB_HEAD_REF" ]]; then
            branchName=$(echo $GITHUB_HEAD_REF | cut -d"/" -f1)
          fi 
          echo "branch-name=${branchName}" >> $GITHUB_OUTPUT
          echo "name=$(echo ${GITHUB_REPOSITORY}  | cut -d'/' -f2)" >> $GITHUB_OUTPUT

      - name: Generate CI config importer
        uses: partior-libs/gcs-yaml-importer@partior-stable
        with:
          yaml-file: projects/${{ steps.get-repo.outputs.name }}.yaml
          query-path: .3p-quorum-plugin.ci
          set-sub-default-keys: .3p-quorum-plugin.ci-default
          output-file: ${{ env.YAML_CONFIG_IMPORTER }}
          yaml-file-for-default: projects/3p-quorum-plugin-default.yaml
          query-path-for-default: .3p-quorum-plugin.ci
          upload: true

      - name: Start import pipeline config
        id: pipeline-config
        run: |
          echo Importing ...${{ env.YAML_CONFIG_IMPORTER }}
          source ./${{ env.YAML_CONFIG_IMPORTER }}

      - name: Generate CI branch config importer
        uses: partior-libs/gcs-yaml-importer@partior-stable
        with:
          yaml-file: projects/${{ steps.get-repo.outputs.name }}.yaml
          query-path: .3p-quorum-plugin.ci.branches.${{ steps.get-repo.outputs.branch-name }}
          set-sub-default-keys: .3p-quorum-plugin.ci.branches.default
          output-file: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          yaml-file-for-default: projects/3p-quorum-plugin-default.yaml
          query-path-for-default: .3p-quorum-plugin.ci.branches.default
          upload: true

      - name: Start import pipeline branch config
        id: pipeline-branch-config
        run: |
          echo Importing ...${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          source ./${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

  gitleaks:
    runs-on: ubuntu-latest
    needs: [ read-config ]
    if: needs.read-config.outputs.ENABLE-GITLEAKS == 'true'
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - name: Start import pipeline branch config
        id: pipeline-config
        run: |
          echo Importing ...${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          source ./${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - uses: actions/checkout@v3
        with:
          fetch-depth: ${{ steps.pipeline-branch-config.outputs.gitleaks_scan-depth }}

      - name: Fetch git details if PR
        if: ${{ github.event.name }} == 'pull_request'
        run: |
          echo [INFO] Git Fetching.. [$GITHUB_BASE_REF]
          git fetch origin $GITHUB_BASE_REF

      - name: gitleaks-action
        uses: partior-libs/gcs-gitleaks-scan@partior-stable

  pre-build:
    runs-on: ubuntu-latest
    needs: [ read-repo, read-config ] 
    env:
      BRANCH_NAME: ${{ needs.read-repo.outputs.BRANCH-NAME }}
      ALL_DELTA_COMMIT_MSG: ${{ needs.read-repo.outputs.DELTA-COMMIT-MSG }}
      ARTIFACT_BASE_NAME: ${{ needs.read-config.outputs.ARTIFACT-BASE-NAME }}
      COMMIT_HASH: ${{ needs.read-repo.outputs.COMMIT-HASH }}
      PR_NUMBER: ${{ needs.read-repo.outputs.PR-NUM }}
      PR_TARGET_BRANCH: ${{ needs.read-repo.outputs.PR-TARGET-BRANCH }}
      SOURCE_BRANCH: ${{ needs.read-repo.outputs.SOURCE-BRANCH }}
    outputs:
      ARTIFACT-VERSION: ${{ steps.version-bot.outputs.artifact-version-name }}
    steps:
      - name: Check Out Repo 
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - name: Start import pipeline branch config
        id: pipeline-branch-config
        run: |
          echo Importing ...${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          source ./${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.YAML_CONFIG_IMPORTER }}

      - name: Start import pipeline CI config
        id: pipeline-ci-config
        run: |
          echo Importing ...${{ env.YAML_CONFIG_IMPORTER }}
          source ./${{ env.YAML_CONFIG_IMPORTER }}

      - name: Get last tag from original source
        id: get-tag
        #if: steps.pipeline-branch-config.outputs.artifact_packager_enabled == 'true' || steps.pipeline-branch-config.outputs.tag-version_git_enabled == 'true' || steps.pipeline-branch-config.outputs.prepare-release_enabled == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_REPO_READER_TOKEN }}
        run: |
          #!/bin/bash
          set +e

          upstreamTagChecker=${{ steps.pipeline-branch-config.outputs.origin-tag-checker_upstream_enabled }}
          upstreamTagApiUrl=${{ steps.pipeline-branch-config.outputs.origin-tag-checker_upstream_api-url }}
          upstreamTagShaChecker=${{ steps.pipeline-branch-config.outputs.origin-tag-checker_upstream_verify-sha_enabled }}
          localFileTagChecker=${{ steps.pipeline-branch-config.outputs.origin-tag-checker_local-file_enabled }}
          localFileTagCheckerFile=${{ steps.pipeline-branch-config.outputs.origin-tag-checker_local-file_file }}

          echo "[DEBUG] upstreamTagChecker=$upstreamTagChecker"
          echo "[DEBUG] upstreamTagApiUrl=$upstreamTagApiUrl"
          echo "[DEBUG] upstreamTagShaChecker=$upstreamTagShaChecker"
          echo "[DEBUG] localFileTagChecker=$localFileTagChecker"
          echo "[DEBUG] localFileTagCheckerFile=$localFileTagCheckerFile"

          lastTag=partior-patch

          if [[ "$localFileTagChecker" == "true" ]]; then
            if [[ ! -f "$localFileTagCheckerFile" ]]; then
              echo "[ERROR] Unable to locate tag checker file: $localFileTagCheckerFile"
              exit 1
            fi
            lastTag=$(cat $localFileTagCheckerFile | xargs)
            lastTag=${lastTag}_patch
          fi

          if [[ "$upstreamTagChecker" == "true" ]] && [[ "$upstreamTagShaChecker" == "true" ]]; then
            tagListFile=taglist.txt
            gh api $upstreamTagApiUrl --jq '.[] | select(.name | test("^v[0-9]+\\.[0-9]+\\.[0-9]+$")) | [.name,.commit.sha] | join(",")' > $tagListFile
            
            for eachTagInfo in $(cat $tagListFile); 
            do
              currentTagName=$(echo $eachTagInfo | cut -d"," -f1 | xargs)
              currentTagSha=$(echo $eachTagInfo | cut -d"," -f2 | xargs)
              echo "[INFO] Checking currentTagSha for tag $currentTagName"
              if (git cat-file -e $currentTagSha); then 
                echo "[INFO] Found SHA hash";
                lastTag=$(echo $currentTagName | sed "s/v//g")
                lastTag=${lastTag}_patch
                break
              else 
                echo "[INFO] SHA hash not found.";
              fi
            done
          elif [[ "$upstreamTagChecker" == "true" ]] && [[ "$upstreamTagShaChecker" == "false" ]]; then
            lastTag=$(gh api $upstreamTagApiUrl --jq '.[] | select(.name | test("^v[0-9]+\\.[0-9]+\\.[0-9]+$")) | .name' | head -n1 | xargs)
            lastTag=$(echo $lastTag | sed "s/v//g")
            lastTag=${lastTag}_patch
          fi

          echo "[INFO] Last tag found: $lastTag"
          echo "PLUGIN-BASE-VERSION=$lastTag" > ./app-version.cfg
          echo "last-tag=$lastTag" >> $GITHUB_OUTPUT

      - name: Start versioning bot
        id: version-bot
        if: steps.pipeline-ci-config.outputs.artifact-auto-versioning_enabled == 'true'
        uses: partior-libs/gcs-versioning-bot@partior-stable
        with:
          jfrog-token: ${{ secrets.JFROG_TOKEN }}
          versioning-rules-importer-file: ${{ env.YAML_CONFIG_IMPORTER }}
          branch-packager-rules-importer-file: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          consolidated-commit-msg: ${{ env.ALL_DELTA_COMMIT_MSG }}
          debug: true

  ci-build:
    name: Build on ${{ matrix.os }}
    env:
      ARTIFACT_VERSION: ${{ needs.pre-build.outputs.ARTIFACT-VERSION }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup Go 1.18
        uses: actions/setup-go@v4
        with:
          go-version: 1.18

      - name: Check out project files
        uses: actions/checkout@v2

      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - name: Start import pipeline branch config
        id: pipeline-branch-config
        run: |
          echo Importing ...${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          source ./${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - name: Extract version metadata
        id: meta
        run: |
          echo "os_arch=$(go env GOOS)-$(go env GOARCH)" >> $GITHUB_OUTPUT
          echo "version=v${{env.ARTIFACT_VERSION}}" >> $GITHUB_OUTPUT
          echo "version_short=${{env.ARTIFACT_VERSION}}" >> $GITHUB_OUTPUT

      - name: Create macos dist
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          make VERSION=${{ steps.meta.outputs.version_short }}

      - name: Create portable linux dist
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          make VERSION=${{ steps.meta.outputs.version_short }} extraldflags='-linkmode external -extldflags "-static"'

      - name: Setup jfrog
        if: steps.pipeline-branch-config.outputs.artifact_packager_enabled == 'true'
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_ENV_1: ${{ secrets.JFROG_ARTIFACTORY_CONFIG }}

      - name: Upload to artifactory
        if: steps.pipeline-branch-config.outputs.artifact_packager_enabled == 'true'
        run: |
          find build/dist -type f
          # cd ${{ steps.pipeline-branch-config.outputs.build_basedir }}
          # jfrog rt u ${{ env.FULL_ARTIFACT_FILENAME }}${{ env.FILE_EXT }}.tar.gz ${{ steps.pipeline-branch-config.outputs.artifact_packager_artifactory-repo }}/${{ steps.pipeline-branch-config.outputs.artifact_packager_group }}/${{ env.ARTIFACT_BASE_NAME }}/${ARTIFACT_VERSION}/
          # jfrog rt bp
          # jfrog rt sp \
          #   "${{ steps.pipeline-branch-config.outputs.artifact_packager_artifactory-repo }}/${{ steps.pipeline-branch-config.outputs.artifact_packager_group }}/${{ env.ARTIFACT_BASE_NAME }}/${ARTIFACT_VERSION}/${{ env.FULL_ARTIFACT_FILENAME }}${{ env.FILE_EXT }}.tar.gz" \
          #   "git.commit_hash=${COMMIT_HASH};github.pr_number=${PR_NUMBER};github.pr_target_branch=${PR_TARGET_BRANCH};git.source_branch=${SOURCE_BRANCH};promotion.qualified=false"


      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.meta.outputs.os_arch }}
          path: build/dist/*.*

  itest:
    name: Run itests on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup Go 1.18
        uses: actions/setup-go@v4
        with:
          go-version: 1.18
      - name: Checkout project files
        uses: actions/checkout@v3
        with:
          path: main
      - name: Checkout quorum-signer Vault plugin
        uses: actions/checkout@v3
        with:
          repository: ConsenSys/quorum-signer-plugin-for-hashicorp-vault
          path: quorum-signer
          ref: v0.2.0
      - name: Checkout quorum
        uses: actions/checkout@v3
        with:
          repository: ConsenSys/quorum
          path: quorum
      - name: Build quorum-signer Vault plugin
        run: |
          pushd quorum-signer
          go mod tidy
          make
          ls build
          go build -o bin/quorum-signer .
          ls bin
          popd
      - name: Build quorum
        run: |
          mkdir -p $(go env GOPATH)/ethereum/go-ethereum
          cp -a quorum/. $(go env GOPATH)/ethereum/go-ethereum/
          pushd $(go env GOPATH)/ethereum/go-ethereum
          make all
          ls build/bin
          echo "$(go env GOPATH)/ethereum/go-ethereum/build/bin" >> $GITHUB_PATH
          popd
      - if: matrix.os == 'ubuntu-latest'
        name: Install vault CLI (ubuntu)
        run: |
          wget https://releases.hashicorp.com/vault/1.6.0/vault_1.6.0_linux_amd64.zip -O /tmp/vault_1.6.0_linux_amd64.zip
          mkdir -p vault/bin
          pushd vault/bin
          unzip /tmp/vault_1.6.0_linux_amd64.zip
          echo "${PWD}" >> $GITHUB_PATH
          popd
      - if: matrix.os == 'macos-latest'
        name: Install vault CLI (macos)
        run: |
          wget https://releases.hashicorp.com/vault/1.6.0/vault_1.6.0_darwin_amd64.zip -O /tmp/vault_1.6.0_darwin_amd64.zip
          mkdir -p vault/bin
          pushd vault/bin
          unzip /tmp/vault_1.6.0_darwin_amd64.zip
          echo "${PWD}" >> $GITHUB_PATH
          popd
      - name: Run itests
        env:
          PLUGIN_DIST: ${{ github.workspace }}/main/build/dist
          PLUGIN_VERSION: 0.2.2-SNAPSHOT
          VAULT_SIGNER_DIR: ${{ github.workspace }}/quorum-signer/bin
          VAULT_SIGNER_NAME: quorum-signer
        run: |
          set -x
          geth version
          vault -v
          ls quorum-signer/build
          set +x
          make -C main itest
      - if: ${{ failure() }}
        name: Upload test output
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-testout
          path: main/internal/test/integration/testout/