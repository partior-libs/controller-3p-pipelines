on:
  workflow_call:
    inputs:
      CONTROLLER-REPO: 
        required: true
        type: string
      CONTROLLER-REF:
        required: false
        type: string
        default: partior-stable
      PROJECT-REPO:
        required: true
        type: string

env:
  YAML_CONFIG_IMPORTER: yaml_importer_${{ github.run_id }}_${{ github.run_number }}
  YAML_BRANCH_CONFIG_IMPORTER: yaml_branch_importer_${{ github.run_id }}_${{ github.run_number }}
  ARTIFACT_VERSION_FILE: version_file_${{ github.run_id }}_${{ github.run_number }}

jobs:
  read-repo:
    runs-on: ubuntu-latest
    outputs:
      BRANCH-NAME: ${{ steps.get-repo.outputs.branch-name }}
      REPO-NAME: ${{ steps.get-repo.outputs.name }}
      DELTA-COMMIT-MSG: ${{ steps.get-repo.outputs.delta-commit-msg }}
      COMMIT-HASH: ${{ steps.get-repo.outputs.commit-hash }}
      PR-NUM: ${{ steps.get-repo.outputs.pr-num }}
      PR-TARGET-BRANCH: ${{ steps.get-repo.outputs.pr-target-branch }}
      SOURCE-BRANCH: ${{ steps.get-repo.outputs.source-branch }}
      COMMIT-SHA: ${{ steps.get-repo.outputs.commit-sha }}
      FLATTEN-BRANCH: ${{ steps.get-repo.outputs.flatten-branch }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get repo details
        id: get-repo
        run: |
          branchName="$(echo ${GITHUB_REF_NAME} | cut -d'/' -f1)"
          sourceBranch=${GITHUB_REF_NAME}
          prTargetBranch='NIL'
          isPR=false
          commitMessages='NIL'
          commitHash=${GITHUB_SHA}
          prNum='NIL'
          if [[ ! -z "$GITHUB_HEAD_REF" ]]; then
            branchName=$(echo $GITHUB_HEAD_REF | cut -d"/" -f1)
            sourceBranch=${GITHUB_HEAD_REF}
            isPR=true
            prTargetBranch=remotes/origin/${GITHUB_BASE_REF}
            git fetch --all
            echo git log $prTargetBranch..HEAD
            commitMessages=$(git log $prTargetBranch..HEAD --pretty=format:"%s" | sed s/[\`\']//g | tr '\n' ' ' | xargs)
            commitHash=$(git log | grep "Merge.*into" | head -1 | xargs | cut -d" " -f2)
            prNum=$(echo $GITHUB_REF_NAME | cut -d"/" -f1)
          fi
          flattenBranch=${sourceBranch/\//_}
          echo [DEBUG] commitHash=${commitHash}
          echo "source-branch=${sourceBranch}" >> $GITHUB_OUTPUT
          echo "pr-num=${prNum}" >> $GITHUB_OUTPUT
          echo "pr-target-branch=${prTargetBranch}" >> $GITHUB_OUTPUT
          echo "commit-hash=${commitHash}" >> $GITHUB_OUTPUT
          echo "commit-sha=$(echo ${commitHash} | cut -c1-8 )" >> $GITHUB_OUTPUT
          echo "branch-name=${branchName}" >> $GITHUB_OUTPUT
          echo "name=$(echo ${GITHUB_REPOSITORY}  | cut -d"/" -f2)" >> $GITHUB_OUTPUT
          echo "delta-commit-msg=${commitMessages}" >> $GITHUB_OUTPUT
          echo "flatten-branch=${flattenBranch}" >> $GITHUB_OUTPUT

  read-config:
    runs-on: ubuntu-latest
    outputs:
      ENABLE-GITLEAKS: ${{ steps.pipeline-branch-config.outputs.gitleaks_enabled }}
      ARTIFACT-BASE-NAME: ${{ steps.pipeline-config.outputs.artifact-base-name }}
      ENABLE-BUILD: ${{ steps.check-compile-flag.outputs.ci-build_enabled }}
      ENABLE-ARTIFACT-PACKAGER: ${{ steps.pipeline-branch-config.outputs.artifact_packager_enabled }}
      PREPARE-RELEASE: ${{ steps.pipeline-branch-config.outputs.prepare-release_enabled }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.CONTROLLER-REPO }}
          ref: ${{ inputs.CONTROLLER-REF }}
          token: ${{ secrets.GH_REPO_READER_TOKEN  }}

      - name: Get repo details
        id: get-repo
        run: |
          branchName="$(echo ${GITHUB_REF_NAME} | cut -d"/" -f1)"
          if [[ ! -z "$GITHUB_HEAD_REF" ]]; then
            branchName=$(echo $GITHUB_HEAD_REF | cut -d"/" -f1)
          fi 
          echo "branch-name=${branchName}" >> $GITHUB_OUTPUT
          echo "name=$(echo ${GITHUB_REPOSITORY}  | cut -d'/' -f2)" >> $GITHUB_OUTPUT

      - name: Generate CI config importer
        uses: partior-libs/gcs-yaml-importer@partior-stable
        with:
          yaml-file: projects/${{ steps.get-repo.outputs.name }}.yaml
          query-path: .3p-gradle.ci
          set-sub-default-keys: .3p-gradle.ci-default
          output-file: ${{ env.YAML_CONFIG_IMPORTER }}
          yaml-file-for-default: projects/3p-gradle-default.yaml
          query-path-for-default: .3p-gradle.ci
          upload: true

      - name: Start import pipeline config
        id: pipeline-config
        run: |
          echo Importing ...${{ env.YAML_CONFIG_IMPORTER }}
          source ./${{ env.YAML_CONFIG_IMPORTER }}

      - name: Generate CI branch config importer
        uses: partior-libs/gcs-yaml-importer@partior-stable
        with:
          yaml-file: projects/${{ steps.get-repo.outputs.name }}.yaml
          query-path: .3p-gradle.ci.branches.${{ steps.get-repo.outputs.branch-name }}
          set-sub-default-keys: .3p-gradle.ci.branches.default
          output-file: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          yaml-file-for-default: projects/3p-gradle-default.yaml
          query-path-for-default: .3p-gradle.ci.branches.default
          upload: true

      - name: Start import pipeline branch config
        id: pipeline-branch-config
        run: |
          echo Importing ...${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          source ./${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

  gitleaks:
    runs-on: ubuntu-latest
    needs: [ read-config ]
    if: needs.read-config.outputs.ENABLE-GITLEAKS == 'true'
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - name: Start import pipeline branch config
        id: pipeline-config
        run: |
          echo Importing ...${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          source ./${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - uses: actions/checkout@v4
        with:
          fetch-depth: ${{ steps.pipeline-branch-config.outputs.gitleaks_scan-depth }}

      - name: Fetch git details if PR
        if: ${{ github.event.name }} == 'pull_request'
        run: |
          echo [INFO] Git Fetching.. [$GITHUB_BASE_REF]
          git fetch origin $GITHUB_BASE_REF

      - name: gitleaks-action
        uses: partior-libs/gcs-gitleaks-scan@partior-stable

  ci-build:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ needs.read-repo.outputs.BRANCH-NAME }}
    needs: [ read-repo, read-config ]
    env:
      BRANCH_NAME: ${{ needs.read-repo.outputs.BRANCH-NAME }}
      ALL_DELTA_COMMIT_MSG: ${{ needs.read-repo.outputs.DELTA-COMMIT-MSG }}
      ARTIFACT_BASE_NAME: ${{ needs.read-config.outputs.ARTIFACT-BASE-NAME }}
      COMMIT_HASH: ${{ needs.read-repo.outputs.COMMIT-HASH }}
      PR_NUMBER: ${{ needs.read-repo.outputs.PR-NUM }}
      PR_TARGET_BRANCH: ${{ needs.read-repo.outputs.PR-TARGET-BRANCH }}
      SOURCE_BRANCH: ${{ needs.read-repo.outputs.SOURCE-BRANCH }}
    outputs:
      ARTIFACT-VERSION: ${{ steps.version-bot.outputs.artifact-version-name }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GH_REPO_READER_TOKEN }}

      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - name: Start import pipeline branch config
        id: pipeline-branch-config
        run: |
          echo Importing ...${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          source ./${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.YAML_CONFIG_IMPORTER }}


      - name: Setup jfrog
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_ENV_1: ${{ secrets.JFROG_ARTIFACTORY_CONFIG }}

      - name: Get Temporary Access Token
        run: |
          accessUsername=$(jf config show | grep "User:" | awk -F'[\t ]+' '{print $2}' | head -n 1)
          accessToken=$(jf rt access-token-create | jq -r .access_token)
          echo "ARTIFACTORY_TMP_USERNAME=${accessUsername}" >> ${GITHUB_ENV}
          echo "ARTIFACTORY_TMP_TOKEN=${accessToken}" >> ${GITHUB_ENV}
          echo "::add-mask::${accessToken}"
          echo "[INFO] accessUsername: $accessUsername"

      - name: Setup Java ${{ steps.pipeline-branch-config.outputs.java-version }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ steps.pipeline-branch-config.outputs.java-version }}
          
      - name: Setup Jfrog Gradle Config
        if: steps.pipeline-branch-config.outputs.compile_gradle_enabled == 'true'
        run: |
          ## Execute gradle with jfrog cli
          jfrogServerID="${{ steps.pipeline-branch-config.outputs.artifact_packager_jfrog-config-id }}"
          gradleRepoResolve="${{ steps.pipeline-branch-config.outputs.artifact_packager_artifactory-repo }}"
          gradleRepoDeploy="${{ steps.pipeline-branch-config.outputs.artifact_packager_artifactory-repo }}"
          echo "[DEBUG] Jfrog Server ID: $jfrogServerID"
          echo "[DEBUG] Gradle Resolve Repo: $gradleRepoResolve"
          echo "[DEBUG] Gradle Deploy Repo: $gradleRepoDeploy"
          jf gradlec --server-id-resolve="$jfrogServerID" --server-id-deploy="$jfrogServerID" --repo-resolve="$gradleRepoResolve" --repo-deploy="$gradleRepoDeploy" --deploy-maven-desc=true --deploy-ivy-desc=true --use-wrapper=true

      - name: Cache Gradle packages
        if: steps.pipeline-branch-config.outputs.compile_gradle_enabled == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Grant execute permission for gradlew
        if: steps.pipeline-branch-config.outputs.compile_gradle_enabled == 'true'
        run: chmod +x gradlew

      - name: Build
        if: steps.pipeline-branch-config.outputs.compile_gradle_enabled == 'true'
        run: jf gradle check jacocoTestReport

      - name: Run Codacy Analysis CLI
        if: steps.pipeline-branch-config.outputs.compile_gradle_enabled == 'true' && steps.pipeline-branch-config.outputs.codacy_spotbugs_enabled == 'true'
        uses: codacy/codacy-analysis-cli-action@master
        with:
          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
          # You can also omit the token and run the tools that support default configurations
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          tool: spotbugs
          skip-uncommitted-files-check: true
          upload: true
          skip-container-engine-check: true

      - name: Start versioning bot
        if: steps.pipeline-branch-config.outputs.artifact_packager_enabled == 'true' || steps.pipeline-branch-config.outputs.tag-version_git_enabled == 'true' || steps.pipeline-branch-config.outputs.prepare-release_enabled == 'true'
        id: version-bot
        uses: partior-libs/gcs-versioning-bot@partior-stable
        with:
          jfrog-token: ${{ secrets.JFROG_ARTIFACTORY_CONFIG }}
          versioning-rules-importer-file: ${{ env.YAML_CONFIG_IMPORTER }}
          branch-packager-rules-importer-file: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          consolidated-commit-msg: ${{ env.DELTA-COMMIT-MSG }}
          jira-username: ${{ secrets.JIRA_USERNAME }}
          jira-password: ${{ secrets.JIRA_PASSWORD }}
          debug: true

      - name: Publish to artifactory
        if: steps.pipeline-branch-config.outputs.artifact_packager_enabled == 'true'
        run: |
          ## Upload to artifactory
          echo "[INFO] Upload to Artifactory"
          jf gradle clean artifactoryPublish -Pversion=${{ steps.version-bot.outputs.artifact-version-name }}  --build-name "Gradle CI - ${{ env.ARTIFACT_BASE_NAME }}" --build-number ${GITHUB_RUN_NUMBER}.${GITHUB_RUN_ATTEMPT} 
          jf rt bp "Gradle CI - ${{ env.ARTIFACT_BASE_NAME }}" "${GITHUB_RUN_NUMBER}.${GITHUB_RUN_ATTEMPT}"


      - name: Git config
        if: steps.pipeline-branch-config.outputs.tag-version_git_enabled == 'true'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Create new tag
        if: steps.pipeline-branch-config.outputs.tag-version_git_enabled == 'true'
        run: git tag -f v${{ steps.version-bot.outputs.artifact-version-name }}

      - name: Push new tag
        if: steps.pipeline-branch-config.outputs.tag-version_git_enabled == 'true'
        run: git push origin v${{ steps.version-bot.outputs.artifact-version-name }} --force

  prepare-release:
      runs-on: ubuntu-latest
      needs: [ read-repo, read-config, ci-build ]
      if: needs.read-config.outputs.PREPARE-RELEASE == 'true'
      env:
        ARTIFACT_BASE_NAME: ${{ needs.read-config.outputs.ARTIFACT-BASE-NAME }}
        ARTIFACT_VERSION: ${{ needs.ci-build.outputs.ARTIFACT-VERSION }}
        BRANCH_NAME: ${{ needs.read-repo.outputs.BRANCH-NAME }}
        COMMIT_HASH: ${{ needs.read-repo.outputs.COMMIT-HASH }}
        REPO_NAME: ${{ needs.read-repo.outputs.REPO-NAME }}
        
      steps:
      - name: Tag release version on code baseline
        uses: partior-libs/gcs-pipe-utils/actions/generic-git-tag@partior-stable
        with: 
          target-repo: "${{ github.repository }}"
          artifact-version: "${{ env.ARTIFACT_VERSION }}"
          target-repo-ref: "${{ env.COMMIT_HASH }}"
          pat-token: ${{ secrets.GH_REPO_READER_TOKEN }}

      - name: Create release
        uses: partior-libs/gjs-create-release@partior-stable
        with:
          name: "v${{ env.ARTIFACT_VERSION }}"
          body: "Auto generated: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          target_commitish: "${{ env.COMMIT_HASH }}"
          generate_release_notes: true
          tag_name: "v${{ env.ARTIFACT_VERSION }}"
          repository: "${{ github.repository }}"
          token: ${{ secrets.GH_REPO_READER_TOKEN }}
          append_body: true
