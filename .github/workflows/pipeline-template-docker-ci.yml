on:
  workflow_call:
    inputs:
      CONTROLLER-REPO: 
        required: true
        type: string
      CONTROLLER-REF:
        required: false
        type: string
        default: main
      PROJECT-REPO:
        required: true
        type: string

env:
  DOCKER_REGISTRY_BASE_URL: https://partior.jfrog.io/artifactory
  YAML_CONFIG_IMPORTER: yaml_importer_${{ github.run_id }}_${{ github.run_number }}
  YAML_BRANCH_CONFIG_IMPORTER: yaml_branch_importer_${{ github.run_id }}_${{ github.run_number }}

jobs:
  read-repo:
    runs-on: ubuntu-latest
    outputs:
      BRANCH-NAME: ${{ steps.get-repo.outputs.branch-name }}
      REPO-NAME: ${{ steps.get-repo.outputs.name }}
      DELTA-COMMIT-MSG: ${{ steps.get-repo.outputs.delta-commit-msg }}
      COMMIT-HASH: ${{ steps.get-repo.outputs.commit-hash }}
      PR-NUM: ${{ steps.get-repo.outputs.pr-num }}
      PR-TARGET-BRANCH: ${{ steps.get-repo.outputs.pr-target-branch }}
      SOURCE-BRANCH: ${{ steps.get-repo.outputs.source-branch }}
    steps:
      # - name: Install YQ
      #   uses: partior-libs/gcs-setup-yq@partior-stable

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Get repo details
        id: get-repo
        run: |
          branchName="$(echo ${GITHUB_REF_NAME} | cut -d"/" -f1)"
          sourceBranch=${GITHUB_REF_NAME}
          prTargetBranch='NIL'
          isPR=false
          commitMessages='NIL'
          commitHash=${GITHUB_SHA}
          prNum='NIL'
          if [[ ! -z "$GITHUB_HEAD_REF" ]]; then
            echo "[DEBUG] This is a PR. GITHUB_HEAD_REF is $GITHUB_HEAD_REF"
            branchName=$(echo $GITHUB_HEAD_REF | cut -d"/" -f1)
            sourceBranch=${GITHUB_HEAD_REF}
            isPR=true
            prTargetBranch=remotes/origin/${GITHUB_BASE_REF}
            git fetch --all
            echo [DEBUG] git log $prTargetBranch..$commitHash --pretty=format:"%s"
            echo [DEBUG] commitMessages=[$(git log $prTargetBranch..$commitHash --pretty=format:"%s" | sed s/[\`\']//g | tr "\t\r\f\n\'\"" ' ')]
            commitMessages=$(git log $prTargetBranch..$commitHash --pretty=format:"%s" | sed s/[\`\']//g | tr "\t\r\f\n\'\"" ' ' | xargs)
            echo [DEBUG] git log $prTargetBranch..$commitHash --pretty=format:"%an"
            echo [DEBUG] commitAuthor=[$(git log $prTargetBranch..$commitHash --pretty=format:"%an" | tr "\t\r\f\n\'\"" ' ' )]
            commitAuthor=$(git log $prTargetBranch..$commitHash --pretty=format:"%an" | tr "\t\r\f\n\'\"" ' ' | xargs)
            echo [DEBUG] commitHash=[$(git log | grep "Merge.*into" | head -1 )]
            commitHash=$(git log | grep "Merge.*into" | head -1 | xargs | cut -d" " -f2)
            prNum=$(echo $GITHUB_REF_NAME | cut -d"/" -f1)
            echo [DEBUG] lastCommitHash=[$(git log -n 1 --pretty=format:'%H' HEAD~1)]
            lastCommitHash=$(git log -n 1 --pretty=format:'%H' HEAD~1)
            echo [DEBUG] lastCommitMsg=[$(git log -n 1 --pretty=format:'%s' HEAD~1 | tr "\t\r\f\n\'\"" ' ' )]
            lastCommitMsg=$(git log -n 1 --pretty=format:'%s' HEAD~1 | tr "\t\r\f\n\'\"" ' ' | xargs)
            echo [DEBUG] lastCommitAuthor=[$(git log -n 1 --pretty=format:'%an' HEAD~1 | tr "\t\r\f\n\'\"" ' ')]
            lastCommitAuthor=$(git log -n 1 --pretty=format:'%an' HEAD~1 | tr "\t\r\f\n\'\"" ' ' | xargs)
          fi
          echo [DEBUG] commitHash=${commitHash}
          echo [DEBUG] commitMessages=${commitMessages}
          echo [DEBUG] commitAuthor=${commitAuthor}
          echo [DEBUG] lastCommitHash=${lastCommitHash}
          echo [DEBUG] lastCommitMsg=${lastCommitMsg}
          echo [DEBUG] lastCommitAuthor=${lastCommitAuthor}
          echo "source-branch=${sourceBranch}" >> $GITHUB_OUTPUT
          echo "pr-num=${prNum}" >> $GITHUB_OUTPUT
          echo "pr-target-branch=${prTargetBranch}" >> $GITHUB_OUTPUT
          echo "commit-hash=${commitHash}" >> $GITHUB_OUTPUT
          echo "commit-sha=$(echo ${commitHash} | cut -c1-8 )" >> $GITHUB_OUTPUT
          echo "branch-name=${branchName}" >> $GITHUB_OUTPUT
          echo "name=$(echo ${GITHUB_REPOSITORY}  | cut -d"/" -f2)" >> $GITHUB_OUTPUT
          echo "delta-commit-msg=${commitMessages}" >> $GITHUB_OUTPUT


  read-config:
    runs-on: ubuntu-latest
    outputs:
      ARTIFACT-BASE-NAME: ${{ steps.pipeline-config.outputs.artifact-base-name }}
      ENABLE-DEPLOYMENT: ${{ steps.pipeline-branch-config.outputs.deployment_enabled }}
      CI-DEPLOYMENT-VERSION-SOURCE: ${{ steps.pipeline-branch-config.outputs.deployment_version-source-manifest }}
      PREPARE-RELEASE: ${{ steps.pipeline-branch-config.outputs.prepare-release_enabled }}
      SIGN-ARTIFACT:  ${{ steps.sign-artifact.outputs.enabled }}
    steps:
      # - name: Install YQ
      #   uses: partior-libs/gcs-setup-yq@partior-stable

      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.CONTROLLER-REPO }}
          ref: ${{ inputs.CONTROLLER-REF }}
          token: ${{ secrets.GH_REPO_READER_TOKEN }}

      - name: Get repo details
        id: get-repo
        run: |
          branchName="$(echo ${GITHUB_REF_NAME} | cut -d"/" -f1)"
          if [[ ! -z "$GITHUB_HEAD_REF" ]]; then
            branchName=$(echo $GITHUB_HEAD_REF | cut -d"/" -f1)
          fi 
          echo "branch-name=${branchName}" >> $GITHUB_OUTPUT
          echo "name=$(echo ${GITHUB_REPOSITORY}  | cut -d'/' -f2)" >> $GITHUB_OUTPUT

      - name: Generate HELMFILE CI config importer
        uses: partior-libs/gcs-yaml-importer@partior-stable
        with:
          yaml-file: projects/${{ steps.get-repo.outputs.name }}.yaml
          query-path: .docker.ci
          set-sub-default-keys: .docker.ci-default
          output-file: ${{ env.YAML_CONFIG_IMPORTER }}
          yaml-file-for-default: projects/docker-default.yaml
          query-path-for-default: .docker.ci
          upload: true

      - name: Start import pipeline config
        id: pipeline-config
        run: |
          echo Importing ...${{ env.YAML_CONFIG_IMPORTER }}
          source ./${{ env.YAML_CONFIG_IMPORTER }}

      - name: Generate CI branch config importer
        uses: partior-libs/gcs-yaml-importer@partior-stable
        with:
          yaml-file: projects/${{ steps.get-repo.outputs.name }}.yaml
          query-path: .docker.ci.branches.${{ steps.get-repo.outputs.branch-name }}
          set-sub-default-keys: .docker.ci.branches.default
          output-file: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          yaml-file-for-default: projects/docker-default.yaml
          query-path-for-default: .docker.ci.branches.default
          upload: true

      - name: Start import pipeline branch config
        id: pipeline-branch-config
        run: |
          echo Importing ...${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          source ./${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - name: Get artifact signing flag
        id: sign-artifact
        run: |
          packagerEnabled="${{ steps.pipeline-branch-config.outputs.artifact_packager_enabled }}"
          signingEnabled="${{ steps.pipeline-branch-config.outputs.artifact_packager_signing_enabled }}"
          finalSignFlag=false
          if [[ "$packagerEnabled" == "true" ]] && [[ "$signingEnabled" == "true" ]]; then
            finalSignFlag=true
          fi
          echo [INFO] Signing flag=$finalSignFlag
          echo "enabled=${finalSignFlag}" >> $GITHUB_OUTPUT

  ci-build:
    runs-on: ubuntu-latest
    needs: [ read-repo, read-config ] 
    env:
      BRANCH_NAME: ${{ needs.read-repo.outputs.BRANCH-NAME }}
      ALL_DELTA_COMMIT_MSG: ${{ needs.read-repo.outputs.DELTA-COMMIT-MSG }}
      ARTIFACT_BASE_NAME: ${{ needs.read-config.outputs.ARTIFACT-BASE-NAME }}
      COMMIT_HASH: ${{ needs.read-repo.outputs.COMMIT-HASH }}
      PR_NUMBER: ${{ needs.read-repo.outputs.PR-NUM }}
      PR_TARGET_BRANCH: ${{ needs.read-repo.outputs.PR-TARGET-BRANCH }}
      SOURCE_BRANCH: ${{ needs.read-repo.outputs.SOURCE-BRANCH }}
    outputs:
      ARTIFACT-VERSION: ${{ steps.version-bot.outputs.artifact-version-name }}
      ARTIFACT-NAME: ${{ steps.artifact-info.outputs.name }}
      ARTIFACT_BASE_NAME: ${{ needs.read-config.outputs.ARTIFACT-BASE-NAME }}
      ARTIFACTORY-DOCKER-REPO: ${{ steps.pipeline-branch-config.outputs.artifact_packager_artifactory-repo }}
    steps:
      # - name: Install YQ
      #   uses: partior-libs/gcs-setup-yq@partior-stable

      - name: Check Out Repo 
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - name: Start import pipeline branch config
        id: pipeline-branch-config
        run: |
          echo Importing ...${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          source ./${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.YAML_CONFIG_IMPORTER }}

      - name: Start import pipeline CI config
        id: pipeline-ci-config
        run: |
          echo Importing ...${{ env.YAML_CONFIG_IMPORTER }}
          source ./${{ env.YAML_CONFIG_IMPORTER }}

      - name: Update prepend automatically
        if: steps.pipeline-ci-config.outputs.artifact-auto-versioning_prepend-version_rules_file_auto_enabled == 'true' && steps.pipeline-ci-config.outputs.artifact-auto-versioning_prepend-version_rules_file_enabled == 'true' && steps.pipeline-ci-config.outputs.artifact-auto-versioning_prepend-version_enabled == 'true'
        run: |
          sourceFile="${{ steps.pipeline-ci-config.outputs.artifact-auto-versioning_prepend-version_rules_file_auto_source-file }}"
          sourceKey="${{ steps.pipeline-ci-config.outputs.artifact-auto-versioning_prepend-version_rules_file_auto_key }}"
          buildVersion=$(cat $sourceFile | grep -E "\s$sourceKey=" | cut -d"=" -f2 | xargs)
          prependKey="${{ steps.pipeline-ci-config.outputs.artifact-auto-versioning_prepend-version_rules_file_key }}"
          prependVersionFile="${{ steps.pipeline-ci-config.outputs.artifact-auto-versioning_prepend-version_rules_file_target }}"

          echo "[INFO] sourceFile=$sourceFile"
          echo "[INFO] sourceKey=$sourceKey"
          echo "[INFO] buildVersion=$buildVersion"
          echo "[INFO] prependKey=$prependKey"
          echo "[INFO] prependVersionFile=$prependVersionFile"

          echo "$prependKey=$buildVersion" > $prependVersionFile

          echo "[INFO] Updated version config:"
          cat $prependVersionFile

      - name: Start versioning bot
        id: version-bot
        if: steps.pipeline-ci-config.outputs.artifact-auto-versioning_enabled == 'true'
        uses: partior-libs/gcs-versioning-bot@partior-stable
        with:
          jfrog-token: ${{ secrets.JFROG_ARTIFACTORY_CONFIG }}
          versioning-rules-importer-file: ${{ env.YAML_CONFIG_IMPORTER }}
          branch-packager-rules-importer-file: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          consolidated-commit-msg: ${{ env.ALL_DELTA_COMMIT_MSG }}
          artifact-type: docker
          debug: true

      - name: Run Prebuild Script
        if: steps.pipeline-branch-config.outputs.build_prebuild_enabled == 'true'
        run: |
          prebuildScript=${{ steps.pipeline-branch-config.outputs.build_prebuild_script }}
          if [[ -z "$prebuildScript" ]]; then
            echo "[ERROR] Prebuild script is empty. Please fix the controller config before retrying..."
            exit 1
          fi
          if [[ ! -f "$prebuildScript" ]]; then
            echo "[ERROR] Unable to locate prebuild script: $prebuildScript"
            exit 1
          fi

          chmod 755 "$prebuildScript"
          echo "[INFO] Start running prebuild script: $prebuildScript"
          $prebuildScript

      - name: Configure Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          driver: docker

      - name: Setup jfrog
        uses: jfrog/setup-jfrog-cli@v2
        env:
          JF_ENV_1: ${{ secrets.JFROG_ARTIFACTORY_CONFIG }}

      - name: Get Temporary Access Token
        id: arti-access-token
        run: |
          accessUsername=$(jf config show | grep "User:" | awk -F'[\t ]+' '{print $2}' | head -n 1)
          accessToken=$(jf rt access-token-create | jq -r .access_token)
          echo "ARTIFACTORY_TMP_USERNAME=${accessUsername}" >> ${GITHUB_ENV}
          echo "ARTIFACTORY_TMP_TOKEN=${accessToken}" >> ${GITHUB_ENV}
          echo "::add-mask::${accessToken}"
          echo "[INFO] accessUsername: $accessUsername"

      - name: Docker login
        uses: docker/login-action@v2
        with: 
          registry: ${{ env.DOCKER_REGISTRY_BASE_URL }}/${{ steps.pipeline-branch-config.outputs.artifact_packager_artifactory-repo }}
          username: ${{ env.ARTIFACTORY_TMP_USERNAME }}
          password: ${{ env.ARTIFACTORY_TMP_TOKEN }}

      - name: Construct docker artifact base name
        id: artifact-info
        run: |
          artifactGroup=${{ steps.pipeline-branch-config.outputs.artifact_packager_group }}
          FINAL_ARTIFACT_BASE_NAME=${{ env.ARTIFACT_BASE_NAME }}
          if [[ ! -z "$artifactGroup" ]]; then
             FINAL_ARTIFACT_BASE_NAME=$artifactGroup/${{ env.ARTIFACT_BASE_NAME }}
          fi
          echo "FINAL_ARTIFACT_BASE_NAME=${FINAL_ARTIFACT_BASE_NAME}" >> ${GITHUB_ENV}
          echo "name=${FINAL_ARTIFACT_BASE_NAME}" >> $GITHUB_OUTPUT

          tagEnabled=${{ steps.pipeline-branch-config.outputs.artifact_packager_tag_enabled }}
          tagName=${{ steps.pipeline-branch-config.outputs.artifact_packager_tag_name }}
          finalTags=partior.jfrog.io/${{ steps.pipeline-branch-config.outputs.artifact_packager_artifactory-repo }}/${FINAL_ARTIFACT_BASE_NAME}:${{ steps.version-bot.outputs.artifact-version-name }}
          if [[ "$tagEnabled" == "true" ]] && [[ ! -z "$tagName" ]]; then
            finalTags=$finalTags,partior.jfrog.io/${{ steps.pipeline-branch-config.outputs.artifact_packager_artifactory-repo }}/${FINAL_ARTIFACT_BASE_NAME}:${tagName}
          fi
          echo "tags=${finalTags}" >> $GITHUB_OUTPUT

      - name: Docker build
        id: docker_build
        uses: docker/build-push-action@v3
        with: 
          context: ./
          file: ./${{ steps.pipeline-branch-config.outputs.build_dockerfile }}
          push: ${{ steps.pipeline-branch-config.outputs.artifact_packager_enabled }}
          tags: ${{ steps.artifact-info.outputs.tags }}
          build-args: |
            ART_USER=${{ env.ARTIFACTORY_TMP_USERNAME }}
            ART_TOKEN=${{ env.ARTIFACTORY_TMP_TOKEN }}

      - name: Publish build info
        if: steps.pipeline-branch-config.outputs.artifact_packager_enabled == 'true'
        run: |
          echo "[INFO] Generate temporary manifest..."
          echo "${{ steps.pipeline-branch-config.outputs.artifact_packager_artifactory-repo }}/${{ env.FINAL_ARTIFACT_BASE_NAME }}:${{ steps.version-bot.outputs.artifact-version-name }}@${{ steps.docker_build.outputs.digest }}" > image_manifest.tmp
          cat image_manifest.tmp

          echo "[INFO] Create build info..."
          echo "jfrog rt bdc ${{ steps.pipeline-branch-config.outputs.artifact_packager_artifactory-repo }} --image-file image_manifest.tmp --build-name \"${GITHUB_WORKFLOW}\" --build-number ${{ github.run_number }}"
          jfrog rt bdc ${{ steps.pipeline-branch-config.outputs.artifact_packager_artifactory-repo }} --image-file image_manifest.tmp --build-name "${GITHUB_WORKFLOW}" --build-number ${{ github.run_number }}

          echo "[INFO] Start publishing build info..."
          echo jfrog rt bp
          jfrog rt bp

          # Disable this part first - failing by Forbidden 403
          # echo "[INFO] Start setting build props..."
          # echo jfrog rt sp \
          #   --build "${GITHUB_WORKFLOW}/${{ github.run_number }}" \
          #   "git.commit_hash=${COMMIT_HASH};github.pr_number=${PR_NUMBER};github.pr_target_branch=${PR_TARGET_BRANCH};git.source_branch=${SOURCE_BRANCH};promotion.qualified=false"
          # jfrog rt sp \
          #   --build "${GITHUB_WORKFLOW}/${{ github.run_number }}" \
          #   "git.commit_hash=${COMMIT_HASH};github.pr_number=${PR_NUMBER};github.pr_target_branch=${PR_TARGET_BRANCH};git.source_branch=${SOURCE_BRANCH};promotion.qualified=false"

  # sign-artifact:
  #   runs-on: ${{ inputs.RUNNER-TYPE }}
  #   needs: [ read-repo, read-config, ci-build ]
  #   if: needs.read-config.outputs.SIGN-ARTIFACT == 'true'
  #   env:
  #     ARTIFACT_NAME: ${{ needs.ci-build.outputs.ARTIFACT-NAME }}
  #     ARTIFACT_BASE_NAME: ${{ needs.read-config.outputs.ARTIFACT-BASE-NAME }}
  #     ARTIFACT_VERSION: ${{ needs.ci-build.outputs.ARTIFACT-VERSION }}
  #     REGISTRY_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
  #     REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
  #     COSIGN_PASSWORD: ${{ secrets.DOCKER_SIGNING_PASSPHRASE }}
  #   steps:
  #     - name: Install YQ
  #       uses: partior-libs/gcs-setup-yq@partior-stable


  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

  #     - name: Start import pipeline branch config
  #       id: pipeline-branch-config
  #       run: |
  #         echo Importing ...${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
  #         source ./${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: ${{ env.YAML_CONFIG_IMPORTER }}

  #     - name: Start import pipeline CI config
  #       id: pipeline-ci-config
  #       run: |
  #         echo Importing ...${{ env.YAML_CONFIG_IMPORTER }}
  #         source ./${{ env.YAML_CONFIG_IMPORTER }}

  #     - name: Setup jfrog
  #       if: steps.pipeline-branch-config.outputs.artifact_packager_enabled == 'true'
  #       uses: jfrog/setup-jfrog-cli@v2
  #       env:
  #         JF_ENV_1: ${{ secrets.JFROG_ARTIFACTORY_CONFIG }}

  #     - name: Get Temporary Access Token
  #       id: arti-access-token
  #       if: steps.pipeline-branch-config.outputs.artifact_packager_enabled == 'true'
  #       run: |
  #         accessUsername=$(jf config show | grep "User:" | awk -F'[\t ]+' '{print $2}' | head -n 1)
  #         accessToken=$(jf rt access-token-create | jq -r .access_token)
  #         echo "ARTIFACTORY_TMP_USERNAME=${accessUsername}" >> ${GITHUB_ENV}
  #         echo "ARTIFACTORY_TMP_TOKEN=${accessToken}" >> ${GITHUB_ENV}
  #         echo "::add-mask::${accessToken}"
  #         echo "[INFO] accessUsername: $accessUsername"

  #     - name: Docker login
  #       uses: docker/login-action@v2
  #       with: 
  #         registry: ${{ env.DOCKER_REGISTRY_BASE_URL }}/${{ steps.pipeline-branch-config.outputs.artifact_packager_artifactory-repo }}
  #         username: ${{ env.ARTIFACTORY_TMP_USERNAME }}
  #         password: ${{ env.ARTIFACTORY_TMP_TOKEN }}

  #     - name: Install Cosign
  #       uses: sigstore/cosign-installer@v2.6.0
  #       with:
  #         cosign-release: 'v1.12.0'

  #     - name: Sign docker image
  #       env:
  #         REGISTRY_USERNAME: ${{ env.ARTIFACTORY_TMP_USERNAME }}
  #         REGISTRY_PASSWORD: ${{ env.ARTIFACTORY_TMP_TOKEN }}
  #         COSIGN_PASSWORD: ${{ secrets.DOCKER_SIGNING_PASSPHRASE }}
  #         DOCKER_REGISTRY: ${{ steps.pipeline-branch-config.outputs.artifact_registry }}
  #         DOCKER_REPO: ${{ steps.pipeline-branch-config.outputs.artifact_packager_artifactory-repo }}
  #       run: |
  #         echo "[INFO] Check cosign version..."
  #         cosign version

  #         echo "[INFO] Preparing keys..."
  #         echo "${{ secrets.DOCKER_SIGNING_PRIVATE_KEY }}" > cosign.key
  #         echo "${{ secrets.DOCKER_SIGNING_PUB_KEY }}" > cosign.pub
     
  #         echo $REGISTRY_PASSWORD | cosign login ${{ env.DOCKER_REGISTRY }} --username $REGISTRY_USERNAME --password-stdin

  #         echo [INFO] Start signing 
  #         cosign sign --key cosign.key ${{ env.DOCKER_REGISTRY }}/${{ steps.pipeline-branch-config.outputs.artifact_packager_artifactory-repo }}/${{ env.ARTIFACT_NAME }}:${{ env.ARTIFACT_VERSION }}
          
  #         echo [INFO] Start verifying... 
  #         cosign verify --key cosign.pub ${{ env.DOCKER_REGISTRY }}/${{ steps.pipeline-branch-config.outputs.artifact_packager_artifactory-repo }}/${{ env.ARTIFACT_NAME }}:${{ env.ARTIFACT_VERSION }} | jq .

  # prepare-release:
  #     runs-on: ${{ inputs.RUNNER-TYPE }}
  #     needs: [ read-repo, read-config, ci-build ]
  #     if: needs.read-config.outputs.PREPARE-RELEASE == 'true'
  #     env:
  #       ARTIFACT_BASE_NAME: ${{ needs.read-config.outputs.ARTIFACT-BASE-NAME }}
  #       ARTIFACT_VERSION: ${{ needs.ci-build.outputs.ARTIFACT-VERSION }}
  #       BRANCH_NAME: ${{ needs.read-repo.outputs.BRANCH-NAME }}
  #       COMMIT_HASH: ${{ needs.read-repo.outputs.COMMIT-HASH }}
  #       REPO_NAME: ${{ needs.read-repo.outputs.REPO-NAME }}
        
  #     steps:
  #     - name: Install YQ
  #       uses: partior-libs/gcs-setup-yq@partior-stable

  #     - name: Tag release version on code baseline
  #       uses: partior-libs/gcs-pipe-utils/actions/generic-git-tag@partior-stable
  #       with: 
  #         target-repo: "${{ github.repository }}"
  #         artifact-version: "${{ env.ARTIFACT_VERSION }}"
  #         target-repo-ref: "${{ env.COMMIT_HASH }}"
  #         pat-token: ${{ secrets.GH_REPO_READER_TOKEN }}

  #     - name: Create release
  #       uses: partior-libs/gjs-create-release@partior-stable
  #       with:
  #         name: "v${{ env.ARTIFACT_VERSION }}"
  #         body: "Auto generated: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  #         target_commitish: "${{ env.COMMIT_HASH }}"
  #         generate_release_notes: true
  #         tag_name: "v${{ env.ARTIFACT_VERSION }}"
  #         repository: "${{ github.repository }}"
  #         token: ${{ secrets.GH_REPO_READER_TOKEN }}
  #         append_body: true

  # upload-config-data:
  #   needs: [ read-repo, read-config, ci-build ]
  #   if: always()
  #   runs-on: self-hosted
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Create config json file
  #       run: |   
  #         mkdir config-output
  #         mkdir config-output/docker
  #         timestamp=$(date +"%Y-%m-%d %H:%M:%S %Z")

  #         json_data_docker='{
  #           "version": "${{ needs.ci-build.outputs.ARTIFACT-VERSION }}",
  #           "source_branch": "${{ needs.read-repo.outputs.SOURCE-BRANCH }}",
  #           "commit_hash": "${{ needs.read-repo.outputs.COMMIT-HASH }}",
  #           "commit_msg": "${{ needs.read-repo.outputs.DELTA-COMMIT-MSG }}",
  #           "commit_author": "${{ needs.read-repo.outputs.COMMIT-AUTHOR }}",
  #           "last_commit_hash": "${{ needs.read-repo.outputs.LAST-COMMIT-HASH }}",
  #           "last_commit_msg": "${{ needs.read-repo.outputs.LAST-COMMIT-MSG }}",
  #           "last_commit_author": "${{ needs.read-repo.outputs.LAST-COMMIT-AUTHOR }}",
  #           "git_repo_name": "${{ github.repository }}",
  #           "pr_num": "${{ needs.read-repo.outputs.PR-NUM }}",
  #           "pr_target_branch": "${{ needs.read-repo.outputs.PR-TARGET-BRANCH }}",
  #           "build_actor": "${{ needs.read-repo.outputs.BUILD-ACTOR }}",
  #           "repository_path": "${{ needs.ci-build.outputs.ARTIFACTORY-DOCKER-REPO }}/${{ needs.ci-build.outputs.ARTIFACT-NAME }}/${{ needs.ci-build.outputs.ARTIFACT-VERSION }}/",
  #           "file_url": "https://partior.jfrog.io/artifactory/${{ needs.ci-build.outputs.ARTIFACTORY-DOCKER-REPO }}/${{ needs.ci-build.outputs.ARTIFACT-NAME }}/${{ needs.ci-build.outputs.ARTIFACT-VERSION }}/",
  #           "name": "${{ needs.ci-build.outputs.ARTIFACT-VERSION }}",
  #           "workflow_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
  #           "workflow_start_datetime": "${{ needs.read-repo.outputs.WORKFLOW-START-TIMESTAMP }}",
  #           "workflow_end_datetime": "'"$timestamp"'"
  #         }'

  #         echo "$json_data_docker" | jq . > config-output/docker/build.json

  #     - name: Upload Config Artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: consul-config
  #         path: config-output

  # post-task-publish-config-docker:
  #   needs: [ read-repo, read-config, ci-build, upload-config-data ]
  #   if: always()
  #   uses: partior-libs/controller-generic-pipelines/.github/workflows/pipeline-template-publish-consul-config.yaml@main
  #   with:
  #     CONFIG-TYPE: build
  #     ARTIFACT-BASE-NAME: ${{ needs.ci-build.outputs.ARTIFACT_BASE_NAME }}
  #     ARTIFACT-BRANCH-NAME: ${{ needs.read-repo.outputs.SOURCE-BRANCH }}
  #     ARTIFACT-BRANCH-TYPE: ${{ needs.read-repo.outputs.BRANCH-NAME }}
  #     ARTIFACT-VERSION: ${{ needs.ci-build.outputs.ARTIFACT-VERSION }}
  #     ARTIFACT-TYPE: docker
  #   secrets: inherit
