on:
  workflow_call:
    inputs:
      CONTROLLER-REPO: 
        required: true
        type: string
      CONTROLLER-REF:
        required: false
        type: string
        default: partior-stable
      PROJECT-REPO:
        required: true
        type: string

env:
  YAML_CONFIG_IMPORTER: yaml_importer_${{ github.run_id }}_${{ github.run_number }}
  YAML_BRANCH_CONFIG_IMPORTER: yaml_branch_importer_${{ github.run_id }}_${{ github.run_number }}
  ARTIFACT_VERSION_FILE: version_file_${{ github.run_id }}_${{ github.run_number }}
  GPG_SECRET_KEYS: ${{ secrets.GPG_SECRET_KEYS }}
  GPG_OWNERTRUST: ${{ secrets.GPG_OWNERTRUST }}
  QUORUM_DOCKER_IMAGE: quorumengineering/quorum
  GO_VERSION: 1.22
  GOPATH: ${{ github.workspace }}/go
  WORKING_DIR: ${{ github.workspace }}/go/src/github.com/ethereum/go-ethereum
  DOCKER_REGISTRY_BASE_URL: https://partior.jfrog.io/artifactory
  DOCKER_ARTIFACTORY_REPO: 3p-docker-dev
  DOCKER_REGISTRY: partior.jfrog.io

jobs:
  read-repo:
    runs-on: ubuntu-latest
    outputs:
      BRANCH-NAME: ${{ steps.get-repo.outputs.branch-name }}
      REPO-NAME: ${{ steps.get-repo.outputs.name }}
      DELTA-COMMIT-MSG: ${{ steps.get-repo.outputs.delta-commit-msg }}
      COMMIT-HASH: ${{ steps.get-repo.outputs.commit-hash }}
      PR-NUM: ${{ steps.get-repo.outputs.pr-num }}
      PR-TARGET-BRANCH: ${{ steps.get-repo.outputs.pr-target-branch }}
      SOURCE-BRANCH: ${{ steps.get-repo.outputs.source-branch }}
      COMMIT-SHA: ${{ steps.get-repo.outputs.commit-sha }}
      FLATTEN-BRANCH: ${{ steps.get-repo.outputs.flatten-branch }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get repo details
        id: get-repo
        run: |
          branchName="$(echo ${GITHUB_REF_NAME} | cut -d'/' -f1)"
          sourceBranch=${GITHUB_REF_NAME}
          prTargetBranch='NIL'
          isPR=false
          commitMessages='NIL'
          commitHash=${GITHUB_SHA}
          prNum='NIL'
          if [[ ! -z "$GITHUB_HEAD_REF" ]]; then
            branchName=$(echo $GITHUB_HEAD_REF | cut -d"/" -f1)
            sourceBranch=${GITHUB_HEAD_REF}
            isPR=true
            prTargetBranch=remotes/origin/${GITHUB_BASE_REF}
            git fetch --all
            echo git log $prTargetBranch..HEAD
            commitMessages=$(git log $prTargetBranch..HEAD --pretty=format:"%s" | sed s/[\`\']//g | tr '\n' ' ' | xargs)
            commitHash=$(git log | grep "Merge.*into" | head -1 | xargs | cut -d" " -f2)
            prNum=$(echo $GITHUB_REF_NAME | cut -d"/" -f1)
          fi
          flattenBranch=${sourceBranch/\//_}
          echo [DEBUG] commitHash=${commitHash}
          echo "source-branch=${sourceBranch}" >> $GITHUB_OUTPUT
          echo "pr-num=${prNum}" >> $GITHUB_OUTPUT
          echo "pr-target-branch=${prTargetBranch}" >> $GITHUB_OUTPUT
          echo "commit-hash=${commitHash}" >> $GITHUB_OUTPUT
          echo "commit-sha=$(echo ${commitHash} | cut -c1-8 )" >> $GITHUB_OUTPUT
          echo "branch-name=${branchName}" >> $GITHUB_OUTPUT
          echo "name=$(echo ${GITHUB_REPOSITORY}  | cut -d"/" -f2)" >> $GITHUB_OUTPUT
          echo "delta-commit-msg=${commitMessages}" >> $GITHUB_OUTPUT
          echo "flatten-branch=${flattenBranch}" >> $GITHUB_OUTPUT

  read-config:
    runs-on: ubuntu-latest
    outputs:
      ENABLE-GITLEAKS: ${{ steps.pipeline-branch-config.outputs.gitleaks_enabled }}
      ARTIFACT-BASE-NAME: ${{ steps.pipeline-config.outputs.artifact-base-name }}
      ENABLE-BUILD: ${{ steps.check-compile-flag.outputs.ci-build_enabled }}
      ENABLE-ARTIFACT-PACKAGER: ${{ steps.pipeline-branch-config.outputs.artifact_packager_enabled }}
      PREPARE-RELEASE: ${{ steps.pipeline-branch-config.outputs.prepare-release_enabled }}
    steps:
      - name: Get owner name
        id: repo-owner
        run: |
          repoOwner=$(echo ${{ inputs.CONTROLLER-REPO }} | cut -d"/" -f1)
          echo "name=$repoOwner" | tee -a $GITHUB_OUTPUT

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_APP_KEY }}
          owner: ${{ steps.repo-owner.outputs.name }}

      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.CONTROLLER-REPO }}
          ref: ${{ inputs.CONTROLLER-REF }}
          token: ${{ steps.app-token.outputs.token }}

      - name: Get repo details
        id: get-repo
        run: |
          branchName="$(echo ${GITHUB_REF_NAME} | cut -d"/" -f1)"
          if [[ ! -z "$GITHUB_HEAD_REF" ]]; then
            branchName=$(echo $GITHUB_HEAD_REF | cut -d"/" -f1)
          fi 
          echo "branch-name=${branchName}" >> $GITHUB_OUTPUT
          echo "name=$(echo ${GITHUB_REPOSITORY}  | cut -d'/' -f2)" >> $GITHUB_OUTPUT

      - name: Generate CI config importer
        uses: partior-libs/gcs-yaml-importer@partior-stable
        with:
          yaml-file: projects/${{ steps.get-repo.outputs.name }}.yaml
          query-path: .3p-golang.ci
          set-sub-default-keys: .3p-golang.ci-default
          output-file: ${{ env.YAML_CONFIG_IMPORTER }}
          yaml-file-for-default: projects/3p-golang-quorum-default.yaml
          query-path-for-default: .3p-golang.ci
          upload: true

      - name: Start import pipeline config
        id: pipeline-config
        run: |
          echo Importing ...${{ env.YAML_CONFIG_IMPORTER }}
          source ./${{ env.YAML_CONFIG_IMPORTER }}

      - name: Generate CI branch config importer
        uses: partior-libs/gcs-yaml-importer@partior-stable
        with:
          yaml-file: projects/${{ steps.get-repo.outputs.name }}.yaml
          query-path: .3p-golang.ci.branches.${{ steps.get-repo.outputs.branch-name }}
          set-sub-default-keys: .3p-golang.ci.branches.default
          output-file: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          yaml-file-for-default: projects/3p-golang-quorum-default.yaml
          query-path-for-default: .3p-golang.ci.branches.default
          upload: true

      - name: Start import pipeline branch config
        id: pipeline-branch-config
        run: |
          echo Importing ...${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          source ./${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

  gitleaks:
    runs-on: ubuntu-latest
    needs: [ read-config ]
    if: needs.read-config.outputs.ENABLE-GITLEAKS == 'true'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - name: Start import pipeline branch config
        id: pipeline-config
        run: |
          echo Importing ...${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          source ./${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - uses: actions/checkout@v4
        with:
          fetch-depth: ${{ steps.pipeline-branch-config.outputs.gitleaks_scan-depth }}

      - name: Fetch git details if PR
        if: ${{ github.event.name }} == 'pull_request'
        run: |
          echo [INFO] Git Fetching.. [$GITHUB_BASE_REF]
          git fetch origin $GITHUB_BASE_REF

      - name: gitleaks-action
        uses: partior-libs/gcs-gitleaks-scan@partior-stable

  test-bin:
    name: 'Run tests and build on ${{ matrix.os }}'
    needs: [ read-config, read-repo ]
    strategy:
      fail-fast: false
      matrix:
        # Not enable for macos as there's a consistent failure:
        # --- FAIL: TestUPNP_DDWRT (2.20s)
        # ###[error]    natupnp_test.go:165: not discovered
        # must be sommething with Github Actions VM networking setup.
        # Event Ubuntu requires a workaround
        os: [ "ubuntu-20.04" ]
    env:
      QUORUM_IGNORE_TEST_PACKAGES: github.com/ethereum/go-ethereum/les,github.com/ethereum/go-ethereum/les/flowcontrol,github.com/ethereum/go-ethereum/mobile
    runs-on: ${{ matrix.os }}
    steps:
      - name: 'Setup Go ${{ env.GO_VERSION }}'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: 'Check out project files'
        uses: actions/checkout@v4
        with:
          submodules: recursive
          path: ${{ env.WORKING_DIR }}
      - name: 'Apply workaround to fix networking in Linux'
        if: runner.os == 'Linux'
        run: |
          # https://github.com/actions/virtual-environments/issues/798
          sudo ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf
      - name: 'Prepare environment'
        run: |
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: 'Run tests and build all'
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          make test all

  pre-build-bin:
    needs: [read-config,read-repo]
    concurrency:
      group: ${{ github.workflow }}-${{ needs.read-repo.outputs.BRANCH-NAME }}
    env:
      ALL_DELTA_COMMIT_MSG: ${{ needs.read-repo.outputs.DELTA-COMMIT-MSG }}
      ARTIFACT_BASE_NAME: ${{ needs.read-config.outputs.ARTIFACT-BASE-NAME }}
      COMMIT_HASH: ${{ needs.read-repo.outputs.COMMIT-HASH }}
      PR_NUMBER: ${{ needs.read-repo.outputs.PR-NUM }}
      PR_TARGET_BRANCH: ${{ needs.read-repo.outputs.PR-TARGET-BRANCH }}
      SOURCE_BRANCH: ${{ needs.read-repo.outputs.SOURCE-BRANCH }}  
    outputs:
      ARTIFACT-VERSION: ${{ steps.version-bot.outputs.artifact-version-name}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - name: Start import pipeline branch config
        id: pipeline-branch-config
        run: |
          echo Importing ...${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          source ./${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.YAML_CONFIG_IMPORTER }}


      - name: Setup jfrog
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_ENV_1: ${{ secrets.JFROG_ARTIFACTORY_CONFIG }}

      - name: Get Temporary Access Token
        run: |
          accessUsername=$(jf config show | grep "User:" | awk -F'[\t ]+' '{print $2}' | head -n 1)
          accessToken=$(jf rt access-token-create | jq -r .access_token)
          echo "ARTIFACTORY_TMP_USERNAME=${accessUsername}" >> ${GITHUB_ENV}
          echo "ARTIFACTORY_TMP_TOKEN=${accessToken}" >> ${GITHUB_ENV}
          echo "::add-mask::${accessToken}"
          echo "[INFO] accessUsername: $accessUsername"

      - name: Get last tag from original source
        id: get-tag
        #if: steps.pipeline-branch-config.outputs.artifact_packager_enabled == 'true' || steps.pipeline-branch-config.outputs.tag-version_git_enabled == 'true' || steps.pipeline-branch-config.outputs.prepare-release_enabled == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/bin/bash
          set +e

          upstreamTagChecker=${{ steps.pipeline-branch-config.outputs.origin-tag-checker_upstream_enabled }}
          upstreamTagApiUrl=${{ steps.pipeline-branch-config.outputs.origin-tag-checker_upstream_api-url }}
          upstreamTagShaChecker=${{ steps.pipeline-branch-config.outputs.origin-tag-checker_upstream_verify-sha_enabled }}
          localFileTagChecker=${{ steps.pipeline-branch-config.outputs.origin-tag-checker_local-file_enabled }}
          localFileTagCheckerFile=${{ steps.pipeline-branch-config.outputs.origin-tag-checker_local-file_file }}

          echo "[DEBUG] upstreamTagChecker=$upstreamTagChecker"
          echo "[DEBUG] upstreamTagApiUrl=$upstreamTagApiUrl"
          echo "[DEBUG] upstreamTagShaChecker=$upstreamTagShaChecker"
          echo "[DEBUG] localFileTagChecker=$localFileTagChecker"
          echo "[DEBUG] localFileTagCheckerFile=$localFileTagCheckerFile"

          lastTag=partior-patch

          if [[ "$localFileTagChecker" == "true" ]]; then
            if [[ ! -f "$localFileTagCheckerFile" ]]; then
              echo "[ERROR] Unable to locate tag checker file: $localFileTagCheckerFile"
              exit 1
            fi
            lastTag=$(cat $localFileTagCheckerFile | xargs)
            lastTag=${lastTag}_patch
          fi

          if [[ "$upstreamTagChecker" == "true" ]] && [[ "$upstreamTagShaChecker" == "true" ]]; then
            tagListFile=taglist.txt
            gh api $upstreamTagApiUrl --jq '.[] | select(.name | test("^v[0-9]+\\.[0-9]+\\.[0-9]+$")) | [.name,.commit.sha] | join(",")' > $tagListFile
            
            for eachTagInfo in $(cat $tagListFile); 
            do
              currentTagName=$(echo $eachTagInfo | cut -d"," -f1 | xargs)
              currentTagSha=$(echo $eachTagInfo | cut -d"," -f2 | xargs)
              echo "[INFO] Checking currentTagSha for tag $currentTagName"
              if (git cat-file -e $currentTagSha); then 
                echo "[INFO] Found SHA hash";
                lastTag=$(echo $currentTagName | sed "s/^v//g")
                lastTag=${lastTag}_patch
                break
              else 
                echo "[INFO] SHA hash not found.";
              fi
            done
          elif [[ "$upstreamTagChecker" == "true" ]] && [[ "$upstreamTagShaChecker" == "false" ]]; then
            lastTag=$(gh api $upstreamTagApiUrl --jq '.[] | select(.name | test("^v[0-9]+\\.[0-9]+\\.[0-9]+$")) | .name' | head -n1 | xargs)
            lastTag=$(echo $lastTag | sed "s/v//g")
            lastTag=${lastTag}_patch
          fi

          echo "[INFO] Last tag found: $lastTag"
          if [[ "$lastTag" == "partior-patch" ]]; then
            echo "[ERROR] Detected failure in retrieving remote tag. Please check the log and resolve the issue before proceeding..."
            exit 1
          fi
          versionFile="./app-version.cfg"
          if [[ -f "${versionFile}" ]]; then
              if grep -q "^QUORUM-VERSION=.*" "${versionFile}"; then
                  sed -i "s|^QUORUM-VERSION=.*|QUORUM-VERSION=${lastTag}|" "${versionFile}"
              else
                  echo "QUORUM-VERSION=${lastTag}" >> "${versionFile}"
              fi
          else
              echo "QUORUM-VERSION=${lastTag}" > "${versionFile}"
          fi
          echo "last-tag=$lastTag" >> $GITHUB_OUTPUT

      - name: Start versioning bot
        #if: steps.pipeline-branch-config.outputs.artifact_packager_enabled == 'true' || steps.pipeline-branch-config.outputs.tag-version_git_enabled == 'true' || steps.pipeline-branch-config.outputs.prepare-release_enabled == 'true'
        id: version-bot
        uses: partior-libs/gcs-versioning-bot@partior-stable
        with:
          jfrog-token: ${{ secrets.JFROG_ARTIFACTORY_CONFIG }}
          versioning-rules-importer-file: ${{ env.YAML_CONFIG_IMPORTER }}
          branch-packager-rules-importer-file: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          consolidated-commit-msg: ${{ env.DELTA-COMMIT-MSG }}
          jira-username: ${{ secrets.JIRA_USERNAME }}
          jira-password: ${{ secrets.JIRA_PASSWORD }}
          debug: true

  build-bin:
    name: 'Build binary for ${{ matrix.os }}'
    concurrency:
      group: ${{ github.workflow }}-${{ needs.read-repo.outputs.BRANCH-NAME }}
    needs: [read-config, read-repo, pre-build-bin]
    env:
      BRANCH_NAME: ${{ needs.read-repo.outputs.BRANCH-NAME }}
      ALL_DELTA_COMMIT_MSG: ${{ needs.read-repo.outputs.DELTA-COMMIT-MSG }}
      ARTIFACT_BASE_NAME: ${{ needs.read-config.outputs.ARTIFACT-BASE-NAME }}
      COMMIT_HASH: ${{ needs.read-repo.outputs.COMMIT-HASH }}
      PR_NUMBER: ${{ needs.read-repo.outputs.PR-NUM }}
      PR_TARGET_BRANCH: ${{ needs.read-repo.outputs.PR-TARGET-BRANCH }}
      SOURCE_BRANCH: ${{ needs.read-repo.outputs.SOURCE-BRANCH }}
      ARTIFACT_VERSION: ${{ needs.pre-build-bin.outputs.ARTIFACT-VERSION }}
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-20.04" ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: 'Setup Go ${{ env.GO_VERSION }}'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.YAML_BRANCH_CONFIG_IMPORTER }}

      - name: Start import pipeline branch config
        id: pipeline-branch-config
        run: |
          echo Importing ...${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          source ./${{ env.YAML_BRANCH_CONFIG_IMPORTER }}
          
      - name: 'Prepare environment'
        id: env
        run: |
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
          echo "key=$(go env GOOS)_$(go env GOARCH)" >> $GITHUB_OUTPUT
          echo "version=v${{ env.ARTIFACT_VERSION }}" >> $GITHUB_OUTPUT
          
      - name: 'Check out project files'
        uses: actions/checkout@v4
        with:
          path: ${{ env.WORKING_DIR }}

      - name: 'Build geth'
        # For MacOS, We use gtar and run purge command to workaround issue
        # https://github.com/actions/virtual-environments/issues/2619
        id: build
        working-directory: ${{ env.WORKING_DIR }}
        run: |-
          make geth
          mkdir -p build/artifact
          oriTarFilename=geth_${{ steps.env.outputs.version }}_${{ steps.env.outputs.key }}.tar.gz
          trimmedTarFilename=geth-$( echo ${{ steps.env.outputs.version }} | sed "s/^v//g")-${{ steps.env.outputs.key }}.tar.gz
          tar_file=build/artifact/$oriTarFilename

          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            sudo /usr/sbin/purge
            gtar cfvz ${tar_file} -C build/bin geth
          else
            tar cfvz ${tar_file} -C build/bin geth
          fi

          echo "ori-tar-filename=${oriTarFilename}" >> $GITHUB_OUTPUT
          echo "trimmed-tar-filename=${trimmedTarFilename}" >> $GITHUB_OUTPUT
          echo "tar_file=${tar_file}" >> $GITHUB_OUTPUT
          echo "checksum=$(shasum -a 256 build/bin/geth | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: 'Verify tarball'
        working-directory: ${{ env.WORKING_DIR }}
        run: |-
          cp ${{ steps.build.outputs.tar_file }} ${{ runner.temp }}
          pushd ${{ runner.temp}}
          tar xfvz *.tar.gz
          actual_checksum=$(shasum -a 256 geth | awk '{print $1}')
          echo "Checksum: ${actual_checksum}"
          popd
          if [ "${{ steps.build.outputs.checksum }}" != "${actual_checksum}" ]; then
            echo "::error::geth checksum validation fails"
            exit 1
          fi

      - name: 'Upload artifact'
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.WORKING_DIR }}/build/artifact
          name: ${{ steps.env.outputs.key }}
          if-no-files-found: error

      - name: Setup jfrog
        if: steps.pipeline-branch-config.outputs.artifact_packager_enabled == 'true'
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_ENV_1: ${{ secrets.JFROG_ARTIFACTORY_CONFIG }}

      - name: Upload to artifactory
        if: steps.pipeline-branch-config.outputs.artifact_packager_enabled == 'true'
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          ARTIFACT_VERSION=$(echo ${{ env.ARTIFACT_VERSION }} | sed -e 's/^v//g')
          echo "[INFO] ARTIFACT_VERSION=$ARTIFACT_VERSION"
          oriTarZipFilename=${{ steps.build.outputs.ori-tar-filename }}
          targetArtifactFile=$(find . -type f -name $oriTarZipFilename)
          if [[ ! -f "$targetArtifactFile" ]]; then
            echo "[ERROR] Tar zip artifact not found: $targetArtifactFile"
            exit 1
          fi
          echo "[INFO] oriTarZipFilename=$oriTarZipFilename"
          
          echo "ori-artifact-name=$oriTarZipFilename" >> $GITHUB_OUTPUT
          tarZipFilename=${{ steps.build.outputs.trimmed-tar-filename }}
          echo "[INFO] tarZipFilename=$tarZipFilename"

          baseDir=$(dirname "$targetArtifactFile")
          groupID=${{ steps.pipeline-branch-config.outputs.artifact_packager_group }}
          groupID=$(echo $groupID | sed "s/\./\//g" | xargs)

          cd $baseDir
          echo [INFO] jfrog rt u $oriTarZipFilename ${{ steps.pipeline-branch-config.outputs.artifact_packager_artifactory-repo }}/${groupID}/${{ env.ARTIFACT_BASE_NAME }}/${ARTIFACT_VERSION}/$tarZipFilename --build-name "${GITHUB_WORKFLOW} - ${{ env.ARTIFACT_BASE_NAME }}" --build-number ${GITHUB_RUN_NUMBER}.${GITHUB_RUN_ATTEMPT} --module $tarZipFilename --fail-no-op
          jfrog rt u $oriTarZipFilename ${{ steps.pipeline-branch-config.outputs.artifact_packager_artifactory-repo }}/${groupID}/${{ env.ARTIFACT_BASE_NAME }}/${ARTIFACT_VERSION}/$tarZipFilename --build-name "${GITHUB_WORKFLOW} - ${{ env.ARTIFACT_BASE_NAME }}" --build-number ${GITHUB_RUN_NUMBER}.${GITHUB_RUN_ATTEMPT} --module $tarZipFilename --fail-no-op
          if [[ $? -gt 0 ]]; then
            echo "[ERROR] Failed jfrog upload [$oriTarZipFilename]"
            exit 1
          fi

          echo [INFO] jfrog rt bp --build-name "${GITHUB_WORKFLOW} - ${{ env.ARTIFACT_BASE_NAME }}" ${GITHUB_RUN_NUMBER}.${GITHUB_RUN_ATTEMPT}
          jfrog rt bp "${GITHUB_WORKFLOW} - ${{ env.ARTIFACT_BASE_NAME }}" ${GITHUB_RUN_NUMBER}.${GITHUB_RUN_ATTEMPT}
          jfrog rt sp \
            "${{ steps.pipeline-branch-config.outputs.artifact_packager_artifactory-repo }}/${groupID}/${{ env.ARTIFACT_BASE_NAME }}/${ARTIFACT_VERSION}/$tarZipFilename" \
            "git.commit_hash=${COMMIT_HASH};github.pr_number=${PR_NUMBER};github.pr_target_branch=${PR_TARGET_BRANCH};git.source_branch=${SOURCE_BRANCH};promotion.qualified=false"

      - name: Copy artifacts from to generic path
        if: steps.pipeline-branch-config.outputs.artifact_packager_enabled == 'true'
        run: |
          sourceRepo="${{ steps.pipeline-branch-config.outputs.artifact_packager_artifactory-repo }}"
          oriTarZipFilename="${{ steps.build.outputs.ori-tar-filename }}"
          trimmedTarZipFilename="${{ steps.build.outputs.trimmed-tar-filename }}"
          targetRepo=$sourceRepo
          if [[ ! "$targetRepo" == *"-local" ]]; then
            targetRepo=$targetRepo-local
          fi
          groupNameID="${{ steps.pipeline-branch-config.outputs.artifact_packager_group }}"
          groupNamePath=$(echo $groupNameID | sed "s/\./\//g")
          version=$(echo ${{ env.ARTIFACT_VERSION }} | sed -e 's/^v//g')
          echo "[INFO] Copying from partior group to generic root ..."
          echo "[INFO] jf rt cp --flat=true $sourceRepo/$groupNamePath/${{ env.ARTIFACT_BASE_NAME }}/$version/$trimmedTarZipFilename $targetRepo/v$version/$oriTarZipFilename"

          jf rt cp --flat=true $sourceRepo/$groupNamePath/${{ env.ARTIFACT_BASE_NAME }}/$version/$trimmedTarZipFilename $targetRepo/v$version/$oriTarZipFilename
          
  docker-build:
    name: 'Build Docker image'
    runs-on: ubuntu-20.04
    steps:
      - name: 'Check out project files'
        uses: actions/checkout@v4
      - name: 'Build docker image'
        id: build
        run: |
          output_dir=${{ runner.temp }}/docker
          mkdir -p $output_dir
          docker build -t quorumengineering/quorum:pr .
          docker save quorumengineering/quorum:pr > quorum-pr.tar
          tar cfvz $output_dir/quorum-pr.tar.gz quorum-pr.tar
          echo "output_dir=$output_dir" >> $GITHUB_OUTPUT
      - name: 'Upload workflow artifact - Docker image'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: ${{ steps.build.outputs.output_dir }}
  acceptance-tests-basic:
    name: Acceptance tests (${{ matrix.tag }})
    needs:
      - docker-build
    if: success()
    strategy:
      fail-fast: false
      matrix:
        # list of tag expression being executed in parallel
        # for PR, only selective tests are run.
        # More comprehensive suites are scheduled to run in master
        tag:
          - 'basic || basic-raft || (advanced && raft) || networks/typical::raft'
          - 'basic || basic-istanbul || (advanced && istanbul && !block-heights) || networks/typical::istanbul'
          - 'basic || basic-istanbul || (advanced && istanbul && !block-heights) || empty-block-period || block-reward || networks/typical::qbft'
          - 'validator-management && networks/template::istanbul-3plus1'
          - 'validator-management && networks/template::qbft-3plus1'
          - 'multitenancy && networks/plugins::raft-multitenancy'
          - 'migration && networks/template::istanbul-4nodes'
          - 'migration && networks/template::raft-4nodes'
          - 'basic || networks/typical::raftmps'
          - 'basic || networks/typical::istanbulmps'
          - 'basic || networks/typical::qbftmps'
    runs-on: ubuntu-20.04
    steps:
      - name: 'Download workflow artifact - Docker image'
        uses: actions/download-artifact@v4
        with:
          name: docker-image
      - name: 'Load Docker image'
        id: setup
        run: |
          find . -type f
          tar xfvz ./quorum-pr.tar.gz
          docker load --input quorum-pr.tar
          docker_env_file="${{ runner.temp }}/env.list"
          echo "TF_VAR_quorum_docker_image={ name = \"quorumengineering/quorum:pr\", local = true }" >> $docker_env_file
          echo "outputDir=${{ runner.temp }}" >> $GITHUB_OUTPUT
          echo "dockerEnvFile=$docker_env_file" >> $GITHUB_OUTPUT
      - name: Setup jfrog
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_ENV_1: ${{ secrets.JFROG_ARTIFACTORY_CONFIG }}
      - name: Get Temporary Access Token
        run: |
          accessUsername=$(jf config show | grep "User:" | awk -F'[\t ]+' '{print $2}' | head -n 1)
          accessToken=$(jf rt access-token-create | jq -r .access_token)
          echo "ARTIFACTORY_TMP_USERNAME=${accessUsername}" >> ${GITHUB_ENV}
          echo "ARTIFACTORY_TMP_TOKEN=${accessToken}" >> ${GITHUB_ENV}
          echo "::add-mask::${accessToken}"
          echo "[INFO] accessUsername: $accessUsername"
      - name: Docker login
        uses: docker/login-action@v2
        with: 
          registry: ${{ env.DOCKER_REGISTRY_BASE_URL }}/${{ env.DOCKER_ARTIFACTORY_REPO }}
          username: ${{ env.ARTIFACTORY_TMP_USERNAME }}
          password: ${{ env.ARTIFACTORY_TMP_TOKEN }}
      - name: 'Run acceptance tests'
        run: |
          cat ${{ steps.setup.outputs.dockerEnvFile }}
          docker run --rm \
            --network host \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${{ steps.setup.outputs.outputDir }}:${{ steps.setup.outputs.outputDir  }} \
            --env-file ${{ steps.setup.outputs.dockerEnvFile }} \
            ${{ env.DOCKER_REGISTRY}}/${{ env.DOCKER_ARTIFACTORY_REPO }}/partior/acctests:latest test \
              -Pauto \
              -Dauto.outputDir=${{ steps.setup.outputs.outputDir  }} \
              -Dtags="${{ matrix.tag }}"
      - name: 'Debug'
        run: |
          docker images
          docker ps -a
  # acceptance-tests-extra:
  #   name: Acceptance tests (${{ matrix.tag }})
  #   needs:
  #     - docker-build
  #   if: success()
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       # list of tag expression being executed in parallel
  #       include:
  #         # privacy enhancements tests
  #         - tag: '(basic && !privacy-enhancements-disabled) || privacy-enhancements || mandatory-recipients || basic-raft || (advanced && raft) || networks/typical::raft'
  #           privacy-enhancements: true
  #           privacy-precompile: false
  #           privacy-marker-transactions: false
  #         - tag: '(basic && !privacy-enhancements-disabled) || privacy-enhancements || mandatory-recipients || basic-istanbul || (advanced && istanbul) || networks/typical::istanbul'
  #           privacy-enhancements: true
  #           privacy-precompile: false
  #           privacy-marker-transactions: false
  #         # privacy precompile/privacy marker transaction tests
  #         - tag: 'basic || basic-raft || (advanced && raft) || networks/typical::raft'
  #           privacy-enhancements: false
  #           privacy-precompile: true
  #           privacy-marker-transactions: false
  #         - tag: 'basic || basic-istanbul || (advanced && istanbul) || networks/typical::istanbul'
  #           privacy-enhancements: false
  #           privacy-precompile: true
  #           privacy-marker-transactions: false
  #         - tag: 'basic || basic-istanbul || (advanced && istanbul) || networks/typical::qbft'
  #           privacy-enhancements: false
  #           privacy-precompile: true
  #           privacy-marker-transactions: false
  #         - tag: '(multitenancy || privacy-precompile-enabled) && networks/plugins::raft-multitenancy'
  #           privacy-enhancements: false
  #           privacy-precompile: true
  #           privacy-marker-transactions: true
  #         - tag: '(basic && !privacy-precompile-disabled) || basic-raft || (advanced && raft) || networks/typical::raft-simple-mps'
  #           privacy-enhancements: false
  #           privacy-precompile: true
  #           privacy-marker-transactions: true
  #         - tag: '(basic && !privacy-precompile-disabled) || basic-istanbul || (advanced && istanbul) || networks/typical::istanbul-simple-mps'
  #           privacy-enhancements: false
  #           privacy-precompile: true
  #           privacy-marker-transactions: true
  #         - tag: '(basic && !privacy-precompile-disabled) || basic-istanbul || (advanced && istanbul) || networks/typical::qbft-simple-mps'
  #           privacy-enhancements: false
  #           privacy-precompile: true
  #           privacy-marker-transactions: true
  #         - tag: '(basic && !privacy-precompile-disabled) || networks/typical::raftmps'
  #           privacy-enhancements: false
  #           privacy-precompile: true
  #           privacy-marker-transactions: true
  #         - tag: '(basic && !privacy-precompile-disabled) || networks/typical::istanbulmps'
  #           privacy-enhancements: false
  #           privacy-precompile: true
  #           privacy-marker-transactions: true
  #         - tag: '(basic && !privacy-precompile-disabled) || networks/typical::qbftmps'
  #           privacy-enhancements: false
  #           privacy-precompile: true
  #           privacy-marker-transactions: true
  #         # privacy enhancements + privacy precompile/privacy marker transaction tests
  #         - tag: '(basic && !privacy-enhancements-disabled && !privacy-precompile-disabled) || privacy-enhancements || mandatory-recipients || privacy-precompile-enabled || basic-raft || (advanced && raft) || networks/typical::raft'
  #           privacy-enhancements: true
  #           privacy-precompile: true
  #           privacy-marker-transactions: true
  #         - tag: '(basic && !privacy-enhancements-disabled && !privacy-precompile-disabled) || privacy-enhancements || mandatory-recipients || privacy-precompile-enabled || basic-istanbul || (advanced && istanbul) || networks/typical::istanbul'
  #           privacy-enhancements: true
  #           privacy-precompile: true
  #           privacy-marker-transactions: true
  #         - tag: '(basic && !privacy-enhancements-disabled && !privacy-precompile-disabled) || privacy-enhancements || mandatory-recipients || privacy-precompile-enabled || basic-istanbul || (advanced && istanbul) || networks/typical::qbft'
  #           privacy-enhancements: true
  #           privacy-precompile: true
  #           privacy-marker-transactions: true
  #         - tag: 'privacy-precompile-compatibility && networks/template::raft-4nodes'
  #           privacy-enhancements: false
  #           privacy-precompile: true
  #           privacy-marker-transactions: false # do not enable pmts as the test will do this on the necessary nodes
  #         - tag: 'privacy-precompile-compatibility && networks/template::istanbul-4nodes'
  #           privacy-enhancements: false
  #           privacy-precompile: true
  #           privacy-marker-transactions: false # do not enable pmts as the test will do this on the necessary nodes
    # runs-on: ubuntu-20.04
    # steps:
    #   - name: 'Download workflow artifact - Docker image'
    #     uses: actions/download-artifact@v3
    #     with:
    #       name: docker-image
    #   - name: 'Load Docker image'
    #     id: setup
    #     run: |
    #       tar xfvz quorum-pr.tar.gz
    #       docker load --input quorum-pr.tar
    #       docker_env_file="${{ runner.temp }}/env.list"
    #       echo "TF_VAR_quorum_docker_image={ name = \"quorumengineering/quorum:pr\", local = true }" >> $docker_env_file
    #       echo "TF_VAR_privacy_enhancements={block=0, enabled=${{ matrix.privacy-enhancements}}}" >> $docker_env_file
    #       echo "TF_VAR_privacy_precompile={block=0, enabled=${{ matrix.privacy-precompile}}}" >> $docker_env_file
    #       echo "TF_VAR_privacy_marker_transactions=${{ matrix.privacy-marker-transactions}}" >> $docker_env_file
    #       echo "outputDir=${{ runner.temp }}" >> $GITHUB_OUTPUT
    #       echo "dockerEnvFile=$docker_env_file" >> $GITHUB_OUTPUT
    #   - name: 'Run extra acceptance tests'
    #     run: |
    #       cat ${{ steps.setup.outputs.dockerEnvFile }}
    #       docker run --rm \
    #         --network host \
    #         -v /var/run/docker.sock:/var/run/docker.sock \
    #         -v ${{ steps.setup.outputs.outputDir }}:${{ steps.setup.outputs.outputDir  }} \
    #         --env-file ${{ steps.setup.outputs.dockerEnvFile }} \
    #         debug-docker-local/quorumengineering/partior/acctests:latest test \
    #           -Pauto \
    #           -Dauto.outputDir=${{ steps.setup.outputs.outputDir  }} \
    #           -Dtags="${{ matrix.tag }}"
    #   - name: 'Debug'
    #     run: |
    #       docker images
    #       docker ps -a

  peeps-tests:
    name: Run PEEPS tests
    needs:
      - docker-build
    runs-on: ubuntu-20.04
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
      - name: 'Download workflow artifact - Docker image'
        uses: actions/download-artifact@v4
        with:
          name: docker-image
      - name: 'Load Docker image'
        id: setup
        run: |
          tar xfvz quorum-pr.tar.gz
          docker load --input quorum-pr.tar
          docker image tag quorumengineering/quorum:pr quorumengineering/quorum:develop
          docker image ls
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: 11
          check-latest: true
      - name: PEEPS
        run: |
          cd build
          ./run-peeps.sh
      - name: PEEPS Test Report
        uses: mikepenz/action-junit-report@v2
        if: always()
        with:
          report_paths: '**/build/test-results/*/TEST-*.xml'
          check_name: PEEPS test report

  prepare-release:
      runs-on: ubuntu-latest
      needs: [ read-repo, read-config, pre-build-bin, build-bin ]
      if: needs.read-config.outputs.PREPARE-RELEASE == 'true'
      env:
        ARTIFACT_BASE_NAME: ${{ needs.read-config.outputs.ARTIFACT-BASE-NAME }}
        ARTIFACT_VERSION: ${{ needs.pre-build-bin.outputs.ARTIFACT-VERSION }}
        BRANCH_NAME: ${{ needs.read-repo.outputs.BRANCH-NAME }}
        COMMIT_HASH: ${{ needs.read-repo.outputs.COMMIT-HASH }}
        REPO_NAME: ${{ needs.read-repo.outputs.REPO-NAME }}
        
      steps:
      - name: Tag release version on code baseline
        uses: partior-libs/gcs-pipe-utils/actions/generic-git-tag@partior-stable
        with: 
          target-repo: "${{ github.repository }}"
          artifact-version: "${{ env.ARTIFACT_VERSION }}"
          target-repo-ref: "${{ env.COMMIT_HASH }}"
          pat-token: ${{ secrets.GH_REPO_READER_TOKEN }}

      - name: Create release
        uses: partior-libs/gjs-create-release@partior-stable
        with:
          name: "v${{ env.ARTIFACT_VERSION }}"
          body: "Auto generated: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          target_commitish: "${{ env.COMMIT_HASH }}"
          generate_release_notes: true
          tag_name: "v${{ env.ARTIFACT_VERSION }}"
          repository: "${{ github.repository }}"
          token: ${{ secrets.GH_REPO_READER_TOKEN }}
          append_body: true

  # publish-docker:
  #   name: Publish Docker Image
  #   needs:
  #     - build
  #     - acceptance-tests-basic
  #     - acceptance-tests-extra
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: 'Checkout'
  #       uses: actions/checkout@v4
  #     - name: 'Build and publish to Docker Hub'
  #       uses: docker/build-push-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
  #         repository: ${{ secrets.DOCKER_REPO }}
  #         tags: develop
  #         add_git_labels: true
